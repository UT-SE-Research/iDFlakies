{
  "dts": [
    {
      "name": "net.sf.marineapi.ais.parser.AISMessageFactoryTest.testCreateWithTwo",
      "intended": {
        "order": [
          "net.sf.marineapi.ais.event.AbstractAISMessageListenerTest.testParametrizedConstructor",
          "net.sf.marineapi.ais.event.AbstractAISMessageListenerTest.testSequenceListener",
          "net.sf.marineapi.ais.event.AbstractAISMessageListenerTest.testSequenceListenerWithIncorrectOrder",
          "net.sf.marineapi.ais.event.AbstractAISMessageListenerTest.testOnMessageWithExpectedMessage",
          "net.sf.marineapi.ais.event.AbstractAISMessageListenerTest.testGenericsListenerDefaultConstructorThrows",
          "net.sf.marineapi.ais.event.AbstractAISMessageListenerTest.testSequenceListenerWithMixedOrder",
          "net.sf.marineapi.ais.event.AbstractAISMessageListenerTest.testGenericsListener",
          "net.sf.marineapi.ais.event.AbstractAISMessageListenerTest.testBasicListenerWithUnexpectedMessage",
          "net.sf.marineapi.ais.event.AbstractAISMessageListenerTest.testConstructor",
          "net.sf.marineapi.ais.util.Longitude28Test.maxValueIsAvailable",
          "net.sf.marineapi.ais.util.Longitude28Test.defaultValueIsNotAvailable",
          "net.sf.marineapi.ais.util.Longitude28Test.largeNegativeValueIsNotAvailable",
          "net.sf.marineapi.ais.util.Longitude28Test.largeNegativeValueIsNotCorrect",
          "net.sf.marineapi.ais.util.Longitude28Test.minValueIsCorrect",
          "net.sf.marineapi.ais.util.Longitude28Test.defaultValueIsCorrect",
          "net.sf.marineapi.ais.util.Longitude28Test.zeroIsAvailable",
          "net.sf.marineapi.ais.util.Longitude28Test.conversionReturnsOnInvalidValues",
          "net.sf.marineapi.ais.util.Longitude28Test.conversionToKnotsWorks",
          "net.sf.marineapi.ais.util.Longitude28Test.largeValueIsNotCorrect",
          "net.sf.marineapi.ais.util.Longitude28Test.largeValueIsNotAvailable",
          "net.sf.marineapi.ais.util.Longitude28Test.maxValueIsCorrect",
          "net.sf.marineapi.ais.util.Longitude28Test.zeroIsCorrect",
          "net.sf.marineapi.ais.util.Longitude28Test.minValueIsAvailable",
          "net.sf.marineapi.ais.util.SpeedOverGroundTest.maxValueIsAvailable",
          "net.sf.marineapi.ais.util.SpeedOverGroundTest.negativeValueIsNotAvailable",
          "net.sf.marineapi.ais.util.SpeedOverGroundTest.defaultValueIsNotAvailable",
          "net.sf.marineapi.ais.util.SpeedOverGroundTest.minValueIsCorrect",
          "net.sf.marineapi.ais.util.SpeedOverGroundTest.defaultValueIsCorrect",
          "net.sf.marineapi.ais.util.SpeedOverGroundTest.conversionReturnsOnInvalidValues",
          "net.sf.marineapi.ais.util.SpeedOverGroundTest.conversionToKnotsWorks",
          "net.sf.marineapi.ais.util.SpeedOverGroundTest.largeValueIsNotCorrect",
          "net.sf.marineapi.ais.util.SpeedOverGroundTest.largeValueIsNotAvailable",
          "net.sf.marineapi.ais.util.SpeedOverGroundTest.negativeValueIsNotCorrect",
          "net.sf.marineapi.ais.util.SpeedOverGroundTest.maxValueIsCorrect",
          "net.sf.marineapi.ais.util.SpeedOverGroundTest.minValueIsAvailable",
          "net.sf.marineapi.ais.util.Latitude27Test.maxValueIsAvailable",
          "net.sf.marineapi.ais.util.Latitude27Test.defaultValueIsNotAvailable",
          "net.sf.marineapi.ais.util.Latitude27Test.largeNegativeValueIsNotAvailable",
          "net.sf.marineapi.ais.util.Latitude27Test.largeNegativeValueIsNotCorrect",
          "net.sf.marineapi.ais.util.Latitude27Test.minValueIsCorrect",
          "net.sf.marineapi.ais.util.Latitude27Test.defaultValueIsCorrect",
          "net.sf.marineapi.ais.util.Latitude27Test.zeroIsAvailable",
          "net.sf.marineapi.ais.util.Latitude27Test.conversionReturnsOnInvalidValues",
          "net.sf.marineapi.ais.util.Latitude27Test.conversionToKnotsWorks",
          "net.sf.marineapi.ais.util.Latitude27Test.largeValueIsNotCorrect",
          "net.sf.marineapi.ais.util.Latitude27Test.largeValueIsNotAvailable",
          "net.sf.marineapi.ais.util.Latitude27Test.maxValueIsCorrect",
          "net.sf.marineapi.ais.util.Latitude27Test.zeroIsCorrect",
          "net.sf.marineapi.ais.util.Latitude27Test.minValueIsAvailable",
          "net.sf.marineapi.ais.parser.AISMessage24ParserTest.getBow",
          "net.sf.marineapi.ais.parser.AISMessage24ParserTest.getPartNumber",
          "net.sf.marineapi.ais.parser.AISMessage24ParserTest.getUnitModelCode",
          "net.sf.marineapi.ais.parser.AISMessage24ParserTest.getName",
          "net.sf.marineapi.ais.parser.AISMessage24ParserTest.getPort",
          "net.sf.marineapi.ais.parser.AISMessage24ParserTest.getVendorId",
          "net.sf.marineapi.ais.parser.AISMessage24ParserTest.getTypeOfShipAndCargoType",
          "net.sf.marineapi.ais.parser.AISMessage24ParserTest.getSerialNumber",
          "net.sf.marineapi.ais.parser.AISMessage24ParserTest.getCallSign",
          "net.sf.marineapi.ais.parser.AISMessage24ParserTest.getStern",
          "net.sf.marineapi.ais.parser.AISMessage24ParserTest.getStarboard",
          "net.sf.marineapi.ais.parser.AISMessage21ParserTest.getVirtualAidFlag",
          "net.sf.marineapi.ais.parser.AISMessage21ParserTest.getTypeOfEPFD",
          "net.sf.marineapi.ais.parser.AISMessage21ParserTest.getRAIMFlag",
          "net.sf.marineapi.ais.parser.AISMessage21ParserTest.getBow",
          "net.sf.marineapi.ais.parser.AISMessage21ParserTest.hasLongitude",
          "net.sf.marineapi.ais.parser.AISMessage21ParserTest.getUtcSecond",
          "net.sf.marineapi.ais.parser.AISMessage21ParserTest.getLatitudeInDegrees",
          "net.sf.marineapi.ais.parser.AISMessage21ParserTest.getName",
          "net.sf.marineapi.ais.parser.AISMessage21ParserTest.getPort",
          "net.sf.marineapi.ais.parser.AISMessage21ParserTest.getAidType",
          "net.sf.marineapi.ais.parser.AISMessage21ParserTest.getAssignedModeFlag",
          "net.sf.marineapi.ais.parser.AISMessage21ParserTest.getNameExtension",
          "net.sf.marineapi.ais.parser.AISMessage21ParserTest.getPositionAccuracy",
          "net.sf.marineapi.ais.parser.AISMessage21ParserTest.getRegional",
          "net.sf.marineapi.ais.parser.AISMessage21ParserTest.hasLatitude",
          "net.sf.marineapi.ais.parser.AISMessage21ParserTest.getOffPositionIndicator",
          "net.sf.marineapi.ais.parser.AISMessage21ParserTest.getStern",
          "net.sf.marineapi.ais.parser.AISMessage21ParserTest.getLongitudeInDegrees",
          "net.sf.marineapi.ais.parser.AISMessage21ParserTest.getStarboard",
          "net.sf.marineapi.ais.parser.AISMessageParserTest.testGetWithoutMessage",
          "net.sf.marineapi.ais.parser.AISMessageParserTest.testAppendIncorrectOrder",
          "net.sf.marineapi.ais.parser.AISMessageParserTest.testAppendInvalidTail",
          "net.sf.marineapi.ais.parser.AISMessageParserTest.testAppendNegativeFillBits",
          "net.sf.marineapi.ais.parser.AISMessageParserTest.testAppendInvalidIndex",
          "net.sf.marineapi.ais.parser.AISMessageParserTest.testGetMMSI",
          "net.sf.marineapi.ais.parser.AISMessageParserTest.testAppend",
          "net.sf.marineapi.ais.parser.AISMessageParserTest.testAppendEmptyString",
          "net.sf.marineapi.ais.parser.AISMessageParserTest.testAppendNull",
          "net.sf.marineapi.ais.parser.AISMessageParserTest.testGetSixbit",
          "net.sf.marineapi.ais.parser.AISMessageParserTest.testGetMessageType",
          "net.sf.marineapi.ais.parser.AISMessageParserTest.testGetRepeatIndicator",
          "net.sf.marineapi.ais.parser.AISMessage09ParserTest.getRAIMFlag",
          "net.sf.marineapi.ais.parser.AISMessage09ParserTest.getRadioStatus",
          "net.sf.marineapi.ais.parser.AISMessage09ParserTest.hasLongitude",
          "net.sf.marineapi.ais.parser.AISMessage09ParserTest.getAltitude",
          "net.sf.marineapi.ais.parser.AISMessage09ParserTest.getLatitudeInDegrees",
          "net.sf.marineapi.ais.parser.AISMessage09ParserTest.getTimeStamp",
          "net.sf.marineapi.ais.parser.AISMessage09ParserTest.getAssignedModeFlag",
          "net.sf.marineapi.ais.parser.AISMessage09ParserTest.getSpeedOverGround",
          "net.sf.marineapi.ais.parser.AISMessage09ParserTest.getCourseOverGround",
          "net.sf.marineapi.ais.parser.AISMessage09ParserTest.getPositionAccuracy",
          "net.sf.marineapi.ais.parser.AISMessage09ParserTest.hasLatitude",
          "net.sf.marineapi.ais.parser.AISMessage09ParserTest.getDTEFlag",
          "net.sf.marineapi.ais.parser.AISMessage09ParserTest.getLongitudeInDegrees",
          "net.sf.marineapi.ais.parser.AISMessage04Test.getTypeOfEPFD",
          "net.sf.marineapi.ais.parser.AISMessage04Test.getUtcMonth",
          "net.sf.marineapi.ais.parser.AISMessage04Test.getUtcMinute",
          "net.sf.marineapi.ais.parser.AISMessage04Test.getUtcSecond",
          "net.sf.marineapi.ais.parser.AISMessage04Test.getLatitudeInDegrees",
          "net.sf.marineapi.ais.parser.AISMessage04Test.getUtcDay",
          "net.sf.marineapi.ais.parser.AISMessage04Test.getUtcHour",
          "net.sf.marineapi.ais.parser.AISMessage04Test.getUtcYear",
          "net.sf.marineapi.ais.parser.AISMessage04Test.getLongitudeInDegrees",
          "net.sf.marineapi.ais.parser.AISPositionReportBParserTest.hasCourseOverGround",
          "net.sf.marineapi.ais.parser.AISPositionReportBParserTest.hasTimeStamp",
          "net.sf.marineapi.ais.parser.AISPositionReportBParserTest.hasSpeedOverGround",
          "net.sf.marineapi.ais.parser.AISPositionReportBParserTest.hasLongitude",
          "net.sf.marineapi.ais.parser.AISPositionReportBParserTest.getLatitudeInDegrees",
          "net.sf.marineapi.ais.parser.AISPositionReportBParserTest.getTimeStamp",
          "net.sf.marineapi.ais.parser.AISPositionReportBParserTest.getSpeedOverGround",
          "net.sf.marineapi.ais.parser.AISPositionReportBParserTest.getCourseOverGround",
          "net.sf.marineapi.ais.parser.AISPositionReportBParserTest.getPositionAccuracy",
          "net.sf.marineapi.ais.parser.AISPositionReportBParserTest.hasLatitude",
          "net.sf.marineapi.ais.parser.AISPositionReportBParserTest.getTrueHeading",
          "net.sf.marineapi.ais.parser.AISPositionReportBParserTest.getLongitudeInDegrees",
          "net.sf.marineapi.ais.parser.AISPositionReportParserTest.hasRateOfTurn",
          "net.sf.marineapi.ais.parser.AISPositionReportParserTest.getNavigationalStatus",
          "net.sf.marineapi.ais.parser.AISPositionReportParserTest.hasCourseOverGround",
          "net.sf.marineapi.ais.parser.AISPositionReportParserTest.hasTimeStamp",
          "net.sf.marineapi.ais.parser.AISPositionReportParserTest.hasSpeedOverGround",
          "net.sf.marineapi.ais.parser.AISPositionReportParserTest.hasLongitude",
          "net.sf.marineapi.ais.parser.AISPositionReportParserTest.getLatitudeInDegrees",
          "net.sf.marineapi.ais.parser.AISPositionReportParserTest.getTimeStamp",
          "net.sf.marineapi.ais.parser.AISPositionReportParserTest.getManouverIndicator",
          "net.sf.marineapi.ais.parser.AISPositionReportParserTest.getSpeedOverGround",
          "net.sf.marineapi.ais.parser.AISPositionReportParserTest.getCourseOverGround",
          "net.sf.marineapi.ais.parser.AISPositionReportParserTest.getPositionAccuracy",
          "net.sf.marineapi.ais.parser.AISPositionReportParserTest.hasLatitude",
          "net.sf.marineapi.ais.parser.AISPositionReportParserTest.getRateOfTurn",
          "net.sf.marineapi.ais.parser.AISPositionReportParserTest.getTrueHeading",
          "net.sf.marineapi.ais.parser.AISPositionReportParserTest.getLongitudeInDegrees",
          "net.sf.marineapi.ais.parser.AISMessage05Test.getDestination",
          "net.sf.marineapi.ais.parser.AISMessage05Test.getETAMinute",
          "net.sf.marineapi.ais.parser.AISMessage05Test.getTypeOfEPFD",
          "net.sf.marineapi.ais.parser.AISMessage05Test.getETAHour",
          "net.sf.marineapi.ais.parser.AISMessage05Test.getBow",
          "net.sf.marineapi.ais.parser.AISMessage05Test.getIMONumber",
          "net.sf.marineapi.ais.parser.AISMessage05Test.getName",
          "net.sf.marineapi.ais.parser.AISMessage05Test.getPort",
          "net.sf.marineapi.ais.parser.AISMessage05Test.getMaximumDraught",
          "net.sf.marineapi.ais.parser.AISMessage05Test.getTypeOfShipAndCargoType",
          "net.sf.marineapi.ais.parser.AISMessage05Test.getETADay",
          "net.sf.marineapi.ais.parser.AISMessage05Test.getETAMonth",
          "net.sf.marineapi.ais.parser.AISMessage05Test.getAISVersionIndicator",
          "net.sf.marineapi.ais.parser.AISMessage05Test.getCallSign",
          "net.sf.marineapi.ais.parser.AISMessage05Test.getStern",
          "net.sf.marineapi.ais.parser.AISMessage05Test.getStarboard"
        ],
        "result": "PASS",
        "testRunId": "1688743409629-c018006c-d128-47f9-a2ed-8e8bef2f5699"
      },
      "revealed": {
        "order": [
          "net.sf.marineapi.nmea.parser.WPLTest.testSetWaypointWithNonZeroValues",
          "net.sf.marineapi.nmea.parser.WPLTest.testGetWaypoint",
          "net.sf.marineapi.nmea.parser.WPLTest.testSetWaypointWithZeroValues",
          "net.sf.marineapi.nmea.parser.WPLTest.testConstructor",
          "net.sf.marineapi.nmea.parser.RMCTest.testSetFaaMode",
          "net.sf.marineapi.nmea.parser.RMCTest.testSetSpeed",
          "net.sf.marineapi.nmea.parser.RMCTest.testGetTime",
          "net.sf.marineapi.nmea.parser.RMCTest.testGetMonth",
          "net.sf.marineapi.nmea.parser.RMCTest.testGetCorrectedCourse",
          "net.sf.marineapi.nmea.parser.RMCTest.testGetPosition",
          "net.sf.marineapi.nmea.parser.RMCTest.testGetDirectionOfVariation",
          "net.sf.marineapi.nmea.parser.RMCTest.testGetCourse",
          "net.sf.marineapi.nmea.parser.RMCTest.testSetPosition",
          "net.sf.marineapi.nmea.parser.RMCTest.testSetTime",
          "net.sf.marineapi.nmea.parser.RMCTest.testSetDate",
          "net.sf.marineapi.nmea.parser.RMCTest.testGetDay",
          "net.sf.marineapi.nmea.parser.RMCTest.testGetFaaMode",
          "net.sf.marineapi.nmea.parser.RMCTest.testSetCourse",
          "net.sf.marineapi.nmea.parser.RMCTest.testSetDataStatus",
          "net.sf.marineapi.nmea.parser.RMCTest.testSetVariation",
          "net.sf.marineapi.nmea.parser.RMCTest.testGetYear",
          "net.sf.marineapi.nmea.parser.RMCTest.testGetMagneticVariation",
          "net.sf.marineapi.nmea.parser.RMCTest.testSetFaaModeWhenOmitted",
          "net.sf.marineapi.nmea.parser.RMCTest.testSetDirectionOfVariationWithInvalidDirection",
          "net.sf.marineapi.nmea.parser.RMCTest.testGetSpeed",
          "net.sf.marineapi.nmea.parser.RMCTest.testConstructor",
          "net.sf.marineapi.nmea.parser.RMCTest.testGetDataStatus",
          "net.sf.marineapi.nmea.parser.RMCTest.testGetDate",
          "net.sf.marineapi.nmea.parser.RMCTest.testSetDirectionOfVariation",
          "net.sf.marineapi.nmea.parser.VHWTest.testSetHeading",
          "net.sf.marineapi.nmea.parser.VHWTest.testSetMagneticHeading",
          "net.sf.marineapi.nmea.parser.VHWTest.testGetMagneticHeading",
          "net.sf.marineapi.nmea.parser.VHWTest.testConstructorString",
          "net.sf.marineapi.nmea.parser.VHWTest.testSetSpeedKilometres",
          "net.sf.marineapi.nmea.parser.VHWTest.testGetSpeedKnots",
          "net.sf.marineapi.nmea.parser.VHWTest.testGetHeading",
          "net.sf.marineapi.nmea.parser.VHWTest.testGetSpeedKilometres",
          "net.sf.marineapi.nmea.parser.VHWTest.testSetSpeedKnots",
          "net.sf.marineapi.nmea.parser.VHWTest.testIsTrue",
          "net.sf.marineapi.nmea.parser.VHWTest.testConstructorTalkerId",
          "net.sf.marineapi.nmea.parser.ZDATest.testGetYear",
          "net.sf.marineapi.nmea.parser.ZDATest.testSetLocalZoneHours",
          "net.sf.marineapi.nmea.parser.ZDATest.testGetDate",
          "net.sf.marineapi.nmea.parser.ZDATest.testGetLocalZoneHours",
          "net.sf.marineapi.nmea.parser.ZDATest.testToDate",
          "net.sf.marineapi.nmea.parser.ZDATest.testSetTime",
          "net.sf.marineapi.nmea.parser.ZDATest.testSetTimeAndLocalZone",
          "net.sf.marineapi.nmea.parser.ZDATest.testGetMonth",
          "net.sf.marineapi.nmea.parser.ZDATest.testGetDay",
          "net.sf.marineapi.nmea.parser.ZDATest.testGetLocalZoneMinutes",
          "net.sf.marineapi.nmea.parser.ZDATest.testGetTime",
          "net.sf.marineapi.nmea.parser.ZDATest.testConstructor",
          "net.sf.marineapi.nmea.parser.ZDATest.testSetLocalZoneMinutes",
          "net.sf.marineapi.nmea.parser.ZDATest.testSetDate",
          "net.sf.marineapi.nmea.sentence.SentenceIdTest.testParseUnknownId",
          "net.sf.marineapi.nmea.sentence.SentenceIdTest.testParseStrNormalLengthProprietaryId",
          "net.sf.marineapi.nmea.sentence.SentenceIdTest.testParseStrShortestPossibleProprietaryId",
          "net.sf.marineapi.nmea.sentence.SentenceIdTest.testParseStrShortProprietaryId",
          "net.sf.marineapi.nmea.sentence.SentenceIdTest.testParseKnownId",
          "net.sf.marineapi.nmea.sentence.SentenceIdTest.testParseStrStandardId",
          "net.sf.marineapi.nmea.sentence.SentenceIdTest.testParseStrLongestPossibleProprietaryId",
          "net.sf.marineapi.nmea.parser.HTDTest.testGetOverride",
          "net.sf.marineapi.nmea.parser.HTDTest.testGetCommandedRudderAngle",
          "net.sf.marineapi.nmea.parser.HTDTest.testGetCommandedRateOfTurnForHeadingChanges",
          "net.sf.marineapi.nmea.parser.HTDTest.testGetTurnMode",
          "net.sf.marineapi.nmea.parser.HTDTest.testGetOffHeadinStatus",
          "net.sf.marineapi.nmea.parser.HTDTest.testGetSteeringMode",
          "net.sf.marineapi.nmea.parser.HTDTest.testIsHeadingReferenceInUseTrue",
          "net.sf.marineapi.nmea.parser.HTDTest.testGetOffTrackStatus",
          "net.sf.marineapi.nmea.parser.HTDTest.testGetCommandedHeadingToSteer",
          "net.sf.marineapi.nmea.parser.HTDTest.testGetCommandedRadiusOfTurnForHEadingChanges",
          "net.sf.marineapi.nmea.parser.HTDTest.testGetRudderStatus",
          "net.sf.marineapi.nmea.parser.HTDTest.testGetCommandedOffTrackLimit",
          "net.sf.marineapi.nmea.parser.HTDTest.testGetHeading",
          "net.sf.marineapi.nmea.parser.HTDTest.testGetCommandedOffHeadingLimit",
          "net.sf.marineapi.nmea.parser.HTDTest.testIsTrue",
          "net.sf.marineapi.nmea.parser.HTDTest.testGetRudderDirection",
          "net.sf.marineapi.nmea.parser.HTDTest.testGetCommandedTrack",
          "net.sf.marineapi.nmea.parser.HTDTest.testGetCommandedRudderLimit",
          "net.sf.marineapi.nmea.parser.HTDTest.testConstructor",
          "net.sf.marineapi.nmea.sentence.TalkerIdTest.testParseUnknown",
          "net.sf.marineapi.nmea.sentence.TalkerIdTest.testParseProprietary",
          "net.sf.marineapi.nmea.sentence.TalkerIdTest.testParseAIS",
          "net.sf.marineapi.nmea.sentence.TalkerIdTest.testParse",
          "net.sf.marineapi.nmea.parser.MWVTest.testGetAngle",
          "net.sf.marineapi.nmea.parser.MWVTest.testIsTrue",
          "net.sf.marineapi.nmea.parser.MWVTest.testSetAngle",
          "net.sf.marineapi.nmea.parser.MWVTest.testGetSpeedUnit",
          "net.sf.marineapi.nmea.parser.MWVTest.testGetStatus",
          "net.sf.marineapi.nmea.parser.MWVTest.testSetNegativeSpeed",
          "net.sf.marineapi.nmea.parser.MWVTest.testSetStatus",
          "net.sf.marineapi.nmea.parser.MWVTest.testSetTrue",
          "net.sf.marineapi.nmea.parser.MWVTest.testMWVParserTalkerId",
          "net.sf.marineapi.nmea.parser.MWVTest.testSetAngleOutOfRange",
          "net.sf.marineapi.nmea.parser.MWVTest.testGetSpeed",
          "net.sf.marineapi.nmea.parser.MWVTest.testSetSpeed",
          "net.sf.marineapi.nmea.parser.MWVTest.testSetSpeedUnit",
          "net.sf.marineapi.nmea.parser.MWVTest.testSetInvalidSpeedUnit",
          "net.sf.marineapi.nmea.parser.MWVTest.testSetNegativeAngle",
          "net.sf.marineapi.nmea.parser.SentenceFactoryTest.testCreateCustomParser",
          "net.sf.marineapi.nmea.parser.SentenceFactoryTest.testListParsers",
          "net.sf.marineapi.nmea.parser.SentenceFactoryTest.testCreateParserWithRandom",
          "net.sf.marineapi.nmea.parser.SentenceFactoryTest.testUnregisterParser",
          "net.sf.marineapi.nmea.parser.SentenceFactoryTest.testCreateEmptyParserWithSentenceIdStr",
          "net.sf.marineapi.nmea.parser.SentenceFactoryTest.testCreateParserWithUnregistered",
          "net.sf.marineapi.nmea.parser.SentenceFactoryTest.testCreateParserWithNull",
          "net.sf.marineapi.nmea.parser.SentenceFactoryTest.testRegisterInvalidParser",
          "net.sf.marineapi.nmea.parser.SentenceFactoryTest.testHasParser",
          "net.sf.marineapi.nmea.parser.SentenceFactoryTest.testCreateParser",
          "net.sf.marineapi.nmea.parser.SentenceFactoryTest.testCreateEmptyParserWithSentenceId",
          "net.sf.marineapi.nmea.parser.SentenceFactoryTest.testCreateParserWithEmptyString",
          "net.sf.marineapi.nmea.parser.SentenceFactoryTest.testCreateEmptyCustomParser",
          "net.sf.marineapi.nmea.parser.SentenceFactoryTest.testSupportedTypesRegistered",
          "net.sf.marineapi.nmea.parser.SentenceFactoryTest.testGetInstance",
          "net.sf.marineapi.nmea.parser.SentenceFactoryTest.testRegisterParserWithAlternativeBeginChar",
          "net.sf.marineapi.nmea.parser.TTMTest.testSetTime",
          "net.sf.marineapi.nmea.parser.TTMTest.testGetSpeed",
          "net.sf.marineapi.nmea.parser.TTMTest.testConstructor",
          "net.sf.marineapi.nmea.parser.TTMTest.testSetCourse",
          "net.sf.marineapi.nmea.parser.TTMTest.testSetSpeed",
          "net.sf.marineapi.nmea.parser.TTMTest.testGetDistanceOfCPA",
          "net.sf.marineapi.nmea.parser.TTMTest.testGetDistance",
          "net.sf.marineapi.nmea.parser.TTMTest.testSetName",
          "net.sf.marineapi.nmea.parser.TTMTest.testGetCourse",
          "net.sf.marineapi.nmea.parser.TTMTest.testSetReferenceFalse",
          "net.sf.marineapi.nmea.parser.TTMTest.testSetTimeToCPA",
          "net.sf.marineapi.nmea.parser.TTMTest.testSetAcquisitionType",
          "net.sf.marineapi.nmea.parser.TTMTest.testGetNumber",
          "net.sf.marineapi.nmea.parser.TTMTest.testSetReferenceTrue",
          "net.sf.marineapi.nmea.parser.TTMTest.testSetDistance",
          "net.sf.marineapi.nmea.parser.TTMTest.testSetBearing",
          "net.sf.marineapi.nmea.parser.TTMTest.testSetNumber",
          "net.sf.marineapi.nmea.parser.TTMTest.testGetAcquisitionType",
          "net.sf.marineapi.nmea.parser.TTMTest.testSetStatus",
          "net.sf.marineapi.nmea.parser.TTMTest.testGetTime",
          "net.sf.marineapi.nmea.parser.TTMTest.testGetBearing",
          "net.sf.marineapi.nmea.parser.TTMTest.testSetDistanceOfCPA",
          "net.sf.marineapi.nmea.parser.TTMTest.testGetName",
          "net.sf.marineapi.nmea.parser.TTMTest.testGetStatus",
          "net.sf.marineapi.nmea.parser.TTMTest.testGetTimeToCPA",
          "net.sf.marineapi.nmea.parser.VBWTest.testSetGroundSpeedStatus",
          "net.sf.marineapi.nmea.parser.VBWTest.testGetTravWaterSpeed",
          "net.sf.marineapi.nmea.parser.VBWTest.testGetLongWaterSpeed",
          "net.sf.marineapi.nmea.parser.VBWTest.testSetTravGroundSpeed",
          "net.sf.marineapi.nmea.parser.VBWTest.testGetWaterSpeedStatus",
          "net.sf.marineapi.nmea.parser.VBWTest.testVBWParserTalkerId",
          "net.sf.marineapi.nmea.parser.VBWTest.testSetSternWaterSpeedStatus",
          "net.sf.marineapi.nmea.parser.VBWTest.testGetTravGroundSpeed",
          "net.sf.marineapi.nmea.parser.VBWTest.testSetLongGroundSpeed",
          "net.sf.marineapi.nmea.parser.VBWTest.testGetSternWaterSpeedStatus",
          "net.sf.marineapi.nmea.parser.VBWTest.testGetSternGroundSpeed",
          "net.sf.marineapi.nmea.parser.VBWTest.testVBWParserString",
          "net.sf.marineapi.nmea.parser.VBWTest.testGetSternWaterSpeed",
          "net.sf.marineapi.nmea.parser.VBWTest.testSetWaterSpeedStatus",
          "net.sf.marineapi.nmea.parser.VBWTest.testSetTravWaterSpeed",
          "net.sf.marineapi.nmea.parser.VBWTest.testSetLongWaterSpeed",
          "net.sf.marineapi.nmea.parser.VBWTest.testSetSternGroundSpeed",
          "net.sf.marineapi.nmea.parser.VBWTest.testSetSternWaterSpeed",
          "net.sf.marineapi.nmea.parser.VBWTest.testGetLongGroundSpeed",
          "net.sf.marineapi.nmea.parser.VBWTest.testSetSternGroundSpeedStatus",
          "net.sf.marineapi.nmea.parser.VBWTest.testGetGroundSpeedStatus",
          "net.sf.marineapi.nmea.parser.VBWTest.testGetSternGroundSpeedStatus",
          "net.sf.marineapi.nmea.parser.TXTTest.testSetMessageIndex",
          "net.sf.marineapi.nmea.parser.TXTTest.testStringConstructor",
          "net.sf.marineapi.nmea.parser.TXTTest.testSetMessage",
          "net.sf.marineapi.nmea.parser.TXTTest.testSetMessageIndexThrows",
          "net.sf.marineapi.nmea.parser.TXTTest.testSetMessageNonASCII",
          "net.sf.marineapi.nmea.parser.TXTTest.testTalkerIdConstructor",
          "net.sf.marineapi.nmea.parser.TXTTest.testGetMessageIndex",
          "net.sf.marineapi.nmea.parser.TXTTest.testGetIndentifier",
          "net.sf.marineapi.nmea.parser.TXTTest.testSetMessageCount",
          "net.sf.marineapi.nmea.parser.TXTTest.testSetIndentifier",
          "net.sf.marineapi.nmea.parser.TXTTest.testGetMessageCount",
          "net.sf.marineapi.nmea.parser.TXTTest.testSetMessageCountThrows",
          "net.sf.marineapi.nmea.parser.TXTTest.testGetMessage",
          "net.sf.marineapi.nmea.parser.MMBTest.testSetBars",
          "net.sf.marineapi.nmea.parser.MMBTest.testGetBars",
          "net.sf.marineapi.nmea.parser.MMBTest.testConstructors",
          "net.sf.marineapi.nmea.parser.MMBTest.testGetInchesOfMercury",
          "net.sf.marineapi.nmea.parser.MMBTest.testSetInchesOfMercury",
          "net.sf.marineapi.nmea.parser.MHUTest.testGetDewPoint",
          "net.sf.marineapi.nmea.parser.MHUTest.testGetAbsoluteHumidity",
          "net.sf.marineapi.nmea.parser.MHUTest.testSetDewPointUnit",
          "net.sf.marineapi.nmea.parser.MHUTest.testGetDewPointUnit",
          "net.sf.marineapi.nmea.parser.MHUTest.testSetDewPoint",
          "net.sf.marineapi.nmea.parser.MHUTest.testGetRelativeHumidity",
          "net.sf.marineapi.nmea.parser.MHUTest.testSetRelativeHumidity",
          "net.sf.marineapi.nmea.parser.MHUTest.testSetAbsoluteHumidity",
          "net.sf.marineapi.nmea.parser.MHUTest.testEmptySentenceConstructor",
          "net.sf.marineapi.nmea.parser.GGATest.testSetGeoidalHeight",
          "net.sf.marineapi.nmea.parser.GGATest.testSetNumberOfSatellites",
          "net.sf.marineapi.nmea.parser.GGATest.testConstructor",
          "net.sf.marineapi.nmea.parser.GGATest.testGetDgpsAge",
          "net.sf.marineapi.nmea.parser.GGATest.testGetAltitudeUnits",
          "net.sf.marineapi.nmea.parser.GGATest.testSetDgpsAge",
          "net.sf.marineapi.nmea.parser.GGATest.testGetPosition",
          "net.sf.marineapi.nmea.parser.GGATest.testSetNumberOfSatellitesThrows",
          "net.sf.marineapi.nmea.parser.GGATest.testSetAltitudeUnits",
          "net.sf.marineapi.nmea.parser.GGATest.testSetDgpsStationId",
          "net.sf.marineapi.nmea.parser.GGATest.testSetFixQuality",
          "net.sf.marineapi.nmea.parser.GGATest.testGetGeoidalHeightUnits",
          "net.sf.marineapi.nmea.parser.GGATest.testGetTime",
          "net.sf.marineapi.nmea.parser.GGATest.testGetNumberOfSatellites",
          "net.sf.marineapi.nmea.parser.GGATest.testSetHorizontalDOP",
          "net.sf.marineapi.nmea.parser.GGATest.testGetFixQuality",
          "net.sf.marineapi.nmea.parser.GGATest.testGetDgpsStationId",
          "net.sf.marineapi.nmea.parser.GGATest.testSetPosition",
          "net.sf.marineapi.nmea.parser.GGATest.testGetHorizontalDOP",
          "net.sf.marineapi.nmea.parser.GGATest.testGetGeoidalHeight",
          "net.sf.marineapi.nmea.parser.GGATest.testSetTime",
          "net.sf.marineapi.nmea.parser.GGATest.testSetGeoidalHeightUnits",
          "net.sf.marineapi.nmea.parser.GGATest.testGGAParser",
          "net.sf.marineapi.nmea.parser.GGATest.testGetAltitude",
          "net.sf.marineapi.nmea.parser.GGATest.testSetAltitude",
          "net.sf.marineapi.ais.util.Latitude27Test.conversionReturnsOnInvalidValues",
          "net.sf.marineapi.ais.util.Latitude27Test.largeNegativeValueIsNotCorrect",
          "net.sf.marineapi.ais.util.Latitude27Test.minValueIsAvailable",
          "net.sf.marineapi.ais.util.Latitude27Test.largeValueIsNotAvailable",
          "net.sf.marineapi.ais.util.Latitude27Test.defaultValueIsCorrect",
          "net.sf.marineapi.ais.util.Latitude27Test.maxValueIsCorrect",
          "net.sf.marineapi.ais.util.Latitude27Test.largeNegativeValueIsNotAvailable",
          "net.sf.marineapi.ais.util.Latitude27Test.minValueIsCorrect",
          "net.sf.marineapi.ais.util.Latitude27Test.largeValueIsNotCorrect",
          "net.sf.marineapi.ais.util.Latitude27Test.zeroIsCorrect",
          "net.sf.marineapi.ais.util.Latitude27Test.conversionToKnotsWorks",
          "net.sf.marineapi.ais.util.Latitude27Test.defaultValueIsNotAvailable",
          "net.sf.marineapi.ais.util.Latitude27Test.maxValueIsAvailable",
          "net.sf.marineapi.ais.util.Latitude27Test.zeroIsAvailable",
          "net.sf.marineapi.ais.event.AbstractAISMessageListenerTest.testParametrizedConstructor",
          "net.sf.marineapi.ais.event.AbstractAISMessageListenerTest.testOnMessageWithExpectedMessage",
          "net.sf.marineapi.ais.event.AbstractAISMessageListenerTest.testConstructor",
          "net.sf.marineapi.ais.event.AbstractAISMessageListenerTest.testBasicListenerWithUnexpectedMessage",
          "net.sf.marineapi.ais.event.AbstractAISMessageListenerTest.testSequenceListenerWithMixedOrder",
          "net.sf.marineapi.ais.event.AbstractAISMessageListenerTest.testGenericsListener",
          "net.sf.marineapi.ais.event.AbstractAISMessageListenerTest.testGenericsListenerDefaultConstructorThrows",
          "net.sf.marineapi.ais.event.AbstractAISMessageListenerTest.testSequenceListenerWithIncorrectOrder",
          "net.sf.marineapi.ais.event.AbstractAISMessageListenerTest.testSequenceListener",
          "net.sf.marineapi.nmea.parser.DBTTest.testSetFathoms",
          "net.sf.marineapi.nmea.parser.DBTTest.testGetFathoms",
          "net.sf.marineapi.nmea.parser.DBTTest.testGetFeet",
          "net.sf.marineapi.nmea.parser.DBTTest.testConstructor",
          "net.sf.marineapi.nmea.parser.DBTTest.testSetMeters",
          "net.sf.marineapi.nmea.parser.DBTTest.testSetFeet",
          "net.sf.marineapi.nmea.parser.DBTTest.testGetMeters",
          "net.sf.marineapi.nmea.parser.GSVTest.testGetSatelliteInfo",
          "net.sf.marineapi.nmea.parser.GSVTest.testSetSatelliteCount",
          "net.sf.marineapi.nmea.parser.GSVTest.testSetSatelliteInfo",
          "net.sf.marineapi.nmea.parser.GSVTest.testGetSentenceIndex",
          "net.sf.marineapi.nmea.parser.GSVTest.testGetSentenceCount",
          "net.sf.marineapi.nmea.parser.GSVTest.testIsFirst",
          "net.sf.marineapi.nmea.parser.GSVTest.testConstructor",
          "net.sf.marineapi.nmea.parser.GSVTest.testGetSatelliteCount",
          "net.sf.marineapi.nmea.parser.GSVTest.testIsLast",
          "net.sf.marineapi.nmea.parser.GSVTest.testGetSatelliteInfoWithEmptyFields",
          "net.sf.marineapi.nmea.parser.GSVTest.testGetSatelliteInfoWithShortSentence",
          "net.sf.marineapi.nmea.parser.GSVTest.testSetSentenceCount",
          "net.sf.marineapi.nmea.parser.GSVTest.testParserGlonassGSV",
          "net.sf.marineapi.ais.parser.AISPositionReportParserTest.hasLatitude",
          "net.sf.marineapi.ais.parser.AISPositionReportParserTest.hasLongitude",
          "net.sf.marineapi.ais.parser.AISPositionReportParserTest.getTrueHeading",
          "net.sf.marineapi.ais.parser.AISPositionReportParserTest.getRateOfTurn",
          "net.sf.marineapi.ais.parser.AISPositionReportParserTest.getLatitudeInDegrees",
          "net.sf.marineapi.ais.parser.AISPositionReportParserTest.hasRateOfTurn",
          "net.sf.marineapi.ais.parser.AISPositionReportParserTest.hasTimeStamp",
          "net.sf.marineapi.ais.parser.AISPositionReportParserTest.hasCourseOverGround",
          "net.sf.marineapi.ais.parser.AISPositionReportParserTest.getLongitudeInDegrees",
          "net.sf.marineapi.ais.parser.AISPositionReportParserTest.getManouverIndicator",
          "net.sf.marineapi.ais.parser.AISPositionReportParserTest.getCourseOverGround",
          "net.sf.marineapi.ais.parser.AISPositionReportParserTest.getTimeStamp",
          "net.sf.marineapi.ais.parser.AISPositionReportParserTest.getSpeedOverGround",
          "net.sf.marineapi.ais.parser.AISPositionReportParserTest.getNavigationalStatus",
          "net.sf.marineapi.ais.parser.AISPositionReportParserTest.getPositionAccuracy",
          "net.sf.marineapi.ais.parser.AISPositionReportParserTest.hasSpeedOverGround",
          "net.sf.marineapi.nmea.parser.VDMTest.testToStringWithAIS",
          "net.sf.marineapi.nmea.parser.VDMTest.testIsLastFragment",
          "net.sf.marineapi.nmea.parser.VDMTest.testGetFragmentNumber",
          "net.sf.marineapi.nmea.parser.VDMTest.testGetFillBits",
          "net.sf.marineapi.nmea.parser.VDMTest.testIsFirstFragment",
          "net.sf.marineapi.nmea.parser.VDMTest.testGetNumberOfFragments",
          "net.sf.marineapi.nmea.parser.VDMTest.testGetRadioChannel",
          "net.sf.marineapi.nmea.parser.VDMTest.testGetMessageId",
          "net.sf.marineapi.nmea.parser.VDMTest.testIsFragmented",
          "net.sf.marineapi.nmea.parser.VDMTest.testGetPayload",
          "net.sf.marineapi.nmea.parser.VDMTest.testIsPartOfMessage",
          "net.sf.marineapi.nmea.parser.VDMTest.testVDMParserTalkerId",
          "net.sf.marineapi.nmea.parser.SentenceParserTest.testIsProprietary",
          "net.sf.marineapi.nmea.parser.SentenceParserTest.testConstructorWithWrongType",
          "net.sf.marineapi.nmea.parser.SentenceParserTest.testConstructorWithNullType",
          "net.sf.marineapi.nmea.parser.SentenceParserTest.testConstructorWithCustomParser",
          "net.sf.marineapi.nmea.parser.SentenceParserTest.testConstructorWithUnsupportedTalker",
          "net.sf.marineapi.nmea.parser.SentenceParserTest.testGetStringValueWithValidIndex",
          "net.sf.marineapi.nmea.parser.SentenceParserTest.testConstructorWithNulls",
          "net.sf.marineapi.nmea.parser.SentenceParserTest.testSetStringValuesReplaceAll",
          "net.sf.marineapi.nmea.parser.SentenceParserTest.testEqualsWithNonEqual",
          "net.sf.marineapi.nmea.parser.SentenceParserTest.testEqualsWithSelf",
          "net.sf.marineapi.nmea.parser.SentenceParserTest.testGetStringValue",
          "net.sf.marineapi.nmea.parser.SentenceParserTest.testGetTalkerId",
          "net.sf.marineapi.nmea.parser.SentenceParserTest.testToString",
          "net.sf.marineapi.nmea.parser.SentenceParserTest.testToSentenceWithMaxLength",
          "net.sf.marineapi.nmea.parser.SentenceParserTest.testIsValid",
          "net.sf.marineapi.nmea.parser.SentenceParserTest.testEqualsWithNull",
          "net.sf.marineapi.nmea.parser.SentenceParserTest.testConstructorWithProprietary",
          "net.sf.marineapi.nmea.parser.SentenceParserTest.testSetBeginChar",
          "net.sf.marineapi.nmea.parser.SentenceParserTest.testConstructorForEmptyProprietary",
          "net.sf.marineapi.nmea.parser.SentenceParserTest.testSetFieldCountHigherByOne",
          "net.sf.marineapi.nmea.parser.SentenceParserTest.testConstructorForEmptySentence",
          "net.sf.marineapi.nmea.parser.SentenceParserTest.testEquals",
          "net.sf.marineapi.nmea.parser.SentenceParserTest.testSetFieldCountHigher",
          "net.sf.marineapi.nmea.parser.SentenceParserTest.testConstructorWithAIVDO",
          "net.sf.marineapi.nmea.parser.SentenceParserTest.testSetDoubleValueWithPrecision",
          "net.sf.marineapi.nmea.parser.SentenceParserTest.testConstructorWithAIVDM",
          "net.sf.marineapi.nmea.parser.SentenceParserTest.testGetSentenceId",
          "net.sf.marineapi.nmea.parser.SentenceParserTest.testSetDoubleValue",
          "net.sf.marineapi.nmea.parser.SentenceParserTest.testGetStringValueWithEmptyFields",
          "net.sf.marineapi.nmea.parser.SentenceParserTest.testSetStringValuesReplaceTail",
          "net.sf.marineapi.nmea.parser.SentenceParserTest.testConstructorWithInvalidSentence",
          "net.sf.marineapi.nmea.parser.SentenceParserTest.testSetFieldCountLower",
          "net.sf.marineapi.nmea.parser.SentenceParserTest.testToSentenceWithMaxLengthOnLimit",
          "net.sf.marineapi.nmea.parser.SentenceParserTest.testGetDoubleValueWithInvalidValue",
          "net.sf.marineapi.nmea.parser.SentenceParserTest.testGetStringValueWithIndexGreaterThanAllowed",
          "net.sf.marineapi.nmea.parser.SentenceParserTest.testToSentenceWithMaxLengthExceeded",
          "net.sf.marineapi.nmea.parser.SentenceParserTest.testSetFieldCountLowerByOne",
          "net.sf.marineapi.nmea.parser.SentenceParserTest.testGetStringValueWithNegativeIndex",
          "net.sf.marineapi.nmea.parser.SentenceParserTest.testGetCharValueWithEmptyFields",
          "net.sf.marineapi.nmea.parser.SentenceParserTest.testSetDoubleValueJDK7RoundingIssue",
          "net.sf.marineapi.nmea.parser.SentenceParserTest.testSetIntValueWithLeading",
          "net.sf.marineapi.nmea.parser.SentenceParserTest.testGetDoubleValueWithEmptyFields",
          "net.sf.marineapi.nmea.event.AbstractSentenceListenerTest.testDefaultConstructor",
          "net.sf.marineapi.nmea.event.AbstractSentenceListenerTest.testBasicListenerWithOtherSentence",
          "net.sf.marineapi.nmea.event.AbstractSentenceListenerTest.testExtendedGenericsListenerWithExpectedSentence",
          "net.sf.marineapi.nmea.event.AbstractSentenceListenerTest.testExtendedGenericsListenerWithUnexpectedSentence",
          "net.sf.marineapi.nmea.event.AbstractSentenceListenerTest.testGenericsHidingListenerWithUnexpectedSentence",
          "net.sf.marineapi.nmea.event.AbstractSentenceListenerTest.testDefaultConstructorThrows",
          "net.sf.marineapi.nmea.event.AbstractSentenceListenerTest.testGenericsHidingListenerWithExpectedSentence",
          "net.sf.marineapi.nmea.event.AbstractSentenceListenerTest.testParametrizedConstructor",
          "net.sf.marineapi.nmea.event.AbstractSentenceListenerTest.testExtendedBasicListenerWithUnexpectedSentence",
          "net.sf.marineapi.nmea.event.AbstractSentenceListenerTest.testDefaultConstructorThrowsWhenExtended",
          "net.sf.marineapi.nmea.event.AbstractSentenceListenerTest.testBasicListenerWithExpectedSentence",
          "net.sf.marineapi.nmea.event.AbstractSentenceListenerTest.testDefaultConstructorWhenExtended",
          "net.sf.marineapi.nmea.event.AbstractSentenceListenerTest.testGenericsListenerWithExpectedSentence",
          "net.sf.marineapi.nmea.event.AbstractSentenceListenerTest.testExtendedBasicListenerWithExpectedSentence",
          "net.sf.marineapi.nmea.event.AbstractSentenceListenerTest.testGenericsListenerWithUnexpectedSentence",
          "net.sf.marineapi.nmea.event.AbstractSentenceListenerTest.testParametrizedConstructorWhenExtended",
          "net.sf.marineapi.nmea.parser.GSTTest.testSetPseudoRangeResidualsRMS",
          "net.sf.marineapi.nmea.parser.GSTTest.testGetSemiMinorError",
          "net.sf.marineapi.nmea.parser.GSTTest.testGetPseudoRangeResidualsRMS",
          "net.sf.marineapi.nmea.parser.GSTTest.testGetTime",
          "net.sf.marineapi.nmea.parser.GSTTest.testGSTParser",
          "net.sf.marineapi.nmea.parser.GSTTest.testSetAltitudeError",
          "net.sf.marineapi.nmea.parser.GSTTest.testSetLongitudeError",
          "net.sf.marineapi.nmea.parser.GSTTest.testSetSemiMajorError",
          "net.sf.marineapi.nmea.parser.GSTTest.testSetSemiMinorError",
          "net.sf.marineapi.nmea.parser.GSTTest.testGetErrorEllipseOrientation",
          "net.sf.marineapi.nmea.parser.GSTTest.testGetLatitudeError",
          "net.sf.marineapi.nmea.parser.GSTTest.testSetErrorEllipseOrientation",
          "net.sf.marineapi.nmea.parser.GSTTest.testGetSemiMajorError",
          "net.sf.marineapi.nmea.parser.GSTTest.testSetLatitudeError",
          "net.sf.marineapi.nmea.parser.GSTTest.testConstructor",
          "net.sf.marineapi.nmea.parser.GSTTest.testGetLongitudeError",
          "net.sf.marineapi.nmea.parser.GSTTest.testSetTime",
          "net.sf.marineapi.nmea.parser.GSTTest.testGetAltitudeError",
          "net.sf.marineapi.nmea.parser.HDMTest.testConstructor",
          "net.sf.marineapi.nmea.parser.HDMTest.testIsTrue",
          "net.sf.marineapi.nmea.parser.HDMTest.testSetHeading",
          "net.sf.marineapi.nmea.parser.HDMTest.testSetNegativeHeading",
          "net.sf.marineapi.nmea.parser.HDMTest.testSetHeadingTooHigh",
          "net.sf.marineapi.nmea.parser.HDMTest.testGetHeading",
          "net.sf.marineapi.provider.PositionProviderTest.testSentenceReadWithLegacyRMC",
          "net.sf.marineapi.provider.PositionProviderTest.testSentenceReadWithGGA",
          "net.sf.marineapi.provider.PositionProviderTest.testSentenceReadWithGLL",
          "net.sf.marineapi.nmea.parser.APBTest.testGetSteerTo",
          "net.sf.marineapi.nmea.parser.APBTest.testIsHeadingToDestinationTrue",
          "net.sf.marineapi.nmea.parser.APBTest.testAPBParserTalkerId",
          "net.sf.marineapi.nmea.parser.APBTest.testGetCycleLockStatus",
          "net.sf.marineapi.nmea.parser.APBTest.testAPBParserString",
          "net.sf.marineapi.nmea.parser.APBTest.testGetBearingPositionToDestination",
          "net.sf.marineapi.nmea.parser.APBTest.testIsPerpendicularPassed",
          "net.sf.marineapi.nmea.parser.APBTest.testIsBearingPositionToDestinationTrue",
          "net.sf.marineapi.nmea.parser.APBTest.testIsBearingOriginToDestionationTrue",
          "net.sf.marineapi.nmea.parser.APBTest.testGetStatus",
          "net.sf.marineapi.nmea.parser.APBTest.testGetBearingOriginToDestination",
          "net.sf.marineapi.nmea.parser.APBTest.testGetCrossTrackError",
          "net.sf.marineapi.nmea.parser.APBTest.testGetDestionationWaypointId",
          "net.sf.marineapi.nmea.parser.APBTest.testIsArrivalCircleEntered",
          "net.sf.marineapi.nmea.parser.APBTest.testGetCrossTrackUnits",
          "net.sf.marineapi.nmea.parser.APBTest.testGetHeadingToDestionation",
          "net.sf.marineapi.nmea.parser.APBTest.testSetArrivalCircleEntered",
          "net.sf.marineapi.nmea.parser.VDRTest.testGetTrueDirection",
          "net.sf.marineapi.nmea.parser.VDRTest.testSetSpeed",
          "net.sf.marineapi.nmea.parser.VDRTest.testGetMagneticDirection",
          "net.sf.marineapi.nmea.parser.VDRTest.testGetSpeed",
          "net.sf.marineapi.nmea.parser.VDRTest.testVDRParserTalkerId",
          "net.sf.marineapi.nmea.parser.VDRTest.testSetTrueDirection",
          "net.sf.marineapi.nmea.parser.VDRTest.testVDRParserString",
          "net.sf.marineapi.nmea.parser.VDRTest.testSetMagneticDirection",
          "net.sf.marineapi.nmea.util.DateTest.testToStringTwoDigitYear",
          "net.sf.marineapi.nmea.util.DateTest.testEqualsItself",
          "net.sf.marineapi.nmea.util.DateTest.testSetYearNegative",
          "net.sf.marineapi.nmea.util.DateTest.testToISO8601WithTimeAndPositiveOffset",
          "net.sf.marineapi.nmea.util.DateTest.testSetMonth",
          "net.sf.marineapi.nmea.util.DateTest.testSetMonthOutOfBounds",
          "net.sf.marineapi.nmea.util.DateTest.testToISO8601FourDigitYear",
          "net.sf.marineapi.nmea.util.DateTest.testToISO8601WithTimeAndNegativeOffset",
          "net.sf.marineapi.nmea.util.DateTest.testSetDayOutOfBounds",
          "net.sf.marineapi.nmea.util.DateTest.testGetDay",
          "net.sf.marineapi.nmea.util.DateTest.testConstructorWithValues",
          "net.sf.marineapi.nmea.util.DateTest.testGetYear",
          "net.sf.marineapi.nmea.util.DateTest.testSetYearFourDigit",
          "net.sf.marineapi.nmea.util.DateTest.testConstructorWithString",
          "net.sf.marineapi.nmea.util.DateTest.testSetYearThreeDigits",
          "net.sf.marineapi.nmea.util.DateTest.testToStringFourDigitYear",
          "net.sf.marineapi.nmea.util.DateTest.testConstructor",
          "net.sf.marineapi.nmea.util.DateTest.testToISO8601TwoDigitYear",
          "net.sf.marineapi.nmea.util.DateTest.testEqualsWhenChanged",
          "net.sf.marineapi.nmea.util.DateTest.testGetMonth",
          "net.sf.marineapi.nmea.util.DateTest.testToISO8601WithTime",
          "net.sf.marineapi.nmea.util.DateTest.testEqualsWrongType",
          "net.sf.marineapi.nmea.util.DateTest.testSetDay",
          "net.sf.marineapi.nmea.util.DateTest.testSetYearTwoDigit",
          "net.sf.marineapi.nmea.util.DateTest.testSetYearFiveDigits",
          "net.sf.marineapi.nmea.util.DateTest.testToISO8601WithTimeAndZeroZone",
          "net.sf.marineapi.nmea.util.DateTest.testEqualsAfterInit",
          "net.sf.marineapi.ais.parser.AISMessage24ParserTest.getStarboard",
          "net.sf.marineapi.ais.parser.AISMessage24ParserTest.getSerialNumber",
          "net.sf.marineapi.ais.parser.AISMessage24ParserTest.getPort",
          "net.sf.marineapi.ais.parser.AISMessage24ParserTest.getStern",
          "net.sf.marineapi.ais.parser.AISMessage24ParserTest.getUnitModelCode",
          "net.sf.marineapi.ais.parser.AISMessage24ParserTest.getCallSign",
          "net.sf.marineapi.ais.parser.AISMessage24ParserTest.getBow",
          "net.sf.marineapi.ais.parser.AISMessage24ParserTest.getVendorId",
          "net.sf.marineapi.ais.parser.AISMessage24ParserTest.getTypeOfShipAndCargoType",
          "net.sf.marineapi.ais.parser.AISMessage24ParserTest.getPartNumber",
          "net.sf.marineapi.ais.parser.AISMessage24ParserTest.getName",
          "net.sf.marineapi.ais.parser.AISPositionReportBParserTest.hasSpeedOverGround",
          "net.sf.marineapi.ais.parser.AISPositionReportBParserTest.getSpeedOverGround",
          "net.sf.marineapi.ais.parser.AISPositionReportBParserTest.getLongitudeInDegrees",
          "net.sf.marineapi.ais.parser.AISPositionReportBParserTest.hasLatitude",
          "net.sf.marineapi.ais.parser.AISPositionReportBParserTest.hasCourseOverGround",
          "net.sf.marineapi.ais.parser.AISPositionReportBParserTest.getTimeStamp",
          "net.sf.marineapi.ais.parser.AISPositionReportBParserTest.hasTimeStamp",
          "net.sf.marineapi.ais.parser.AISPositionReportBParserTest.hasLongitude",
          "net.sf.marineapi.ais.parser.AISPositionReportBParserTest.getPositionAccuracy",
          "net.sf.marineapi.ais.parser.AISPositionReportBParserTest.getCourseOverGround",
          "net.sf.marineapi.ais.parser.AISPositionReportBParserTest.getTrueHeading",
          "net.sf.marineapi.ais.parser.AISPositionReportBParserTest.getLatitudeInDegrees",
          "net.sf.marineapi.nmea.parser.VLWTest.testSetTripUnits",
          "net.sf.marineapi.nmea.parser.VLWTest.testSetTotalUnits",
          "net.sf.marineapi.nmea.parser.VLWTest.testGetTripUnits",
          "net.sf.marineapi.nmea.parser.VLWTest.testVLWParserString",
          "net.sf.marineapi.nmea.parser.VLWTest.testGetTotalUnits",
          "net.sf.marineapi.nmea.parser.VLWTest.testSetTotal",
          "net.sf.marineapi.nmea.parser.VLWTest.testGetTotal",
          "net.sf.marineapi.nmea.parser.VLWTest.testGetTrip",
          "net.sf.marineapi.nmea.parser.VLWTest.testSetTrip",
          "net.sf.marineapi.nmea.parser.VLWTest.testVLWParserTalkerId",
          "net.sf.marineapi.nmea.parser.DTMTest.testSetDatumSubCode",
          "net.sf.marineapi.nmea.parser.DTMTest.testSetLongitudeOffset",
          "net.sf.marineapi.nmea.parser.DTMTest.testDTMParserTalkerId",
          "net.sf.marineapi.nmea.parser.DTMTest.testSetDatumCode",
          "net.sf.marineapi.nmea.parser.DTMTest.testGetLatitudeOffset",
          "net.sf.marineapi.nmea.parser.DTMTest.testGetDatumCode",
          "net.sf.marineapi.nmea.parser.DTMTest.testDTMParserString",
          "net.sf.marineapi.nmea.parser.DTMTest.testGetLongitudeOffset",
          "net.sf.marineapi.nmea.parser.DTMTest.testSetLatitudeOffset",
          "net.sf.marineapi.nmea.parser.DTMTest.testSetName",
          "net.sf.marineapi.nmea.parser.DTMTest.testGetDatumSubCode",
          "net.sf.marineapi.nmea.parser.DTMTest.testGetAltitudeOffset",
          "net.sf.marineapi.nmea.parser.DTMTest.testGetName",
          "net.sf.marineapi.ais.parser.AISMessageFactoryTest.testCreate"
        ],
        "result": "ERROR",
        "testRunId": "1688743415821-2bbfa128-4a66-4cf7-adb5-43c47e8a8934"
      },
      "type": "OD"
    },
    {
      "name": "net.sf.marineapi.ais.event.AbstractAISMessageListenerTest.testSequenceListenerWithIncorrectOrder",
      "intended": {
        "order": [
          "net.sf.marineapi.ais.event.AbstractAISMessageListenerTest.testParametrizedConstructor",
          "net.sf.marineapi.ais.event.AbstractAISMessageListenerTest.testSequenceListener"
        ],
        "result": "PASS",
        "testRunId": "1688743409629-c018006c-d128-47f9-a2ed-8e8bef2f5699"
      },
      "revealed": {
        "order": [
          "net.sf.marineapi.nmea.parser.WPLTest.testSetWaypointWithNonZeroValues",
          "net.sf.marineapi.nmea.parser.WPLTest.testGetWaypoint",
          "net.sf.marineapi.nmea.parser.WPLTest.testSetWaypointWithZeroValues",
          "net.sf.marineapi.nmea.parser.WPLTest.testConstructor",
          "net.sf.marineapi.nmea.parser.RMCTest.testSetFaaMode",
          "net.sf.marineapi.nmea.parser.RMCTest.testSetSpeed",
          "net.sf.marineapi.nmea.parser.RMCTest.testGetTime",
          "net.sf.marineapi.nmea.parser.RMCTest.testGetMonth",
          "net.sf.marineapi.nmea.parser.RMCTest.testGetCorrectedCourse",
          "net.sf.marineapi.nmea.parser.RMCTest.testGetPosition",
          "net.sf.marineapi.nmea.parser.RMCTest.testGetDirectionOfVariation",
          "net.sf.marineapi.nmea.parser.RMCTest.testGetCourse",
          "net.sf.marineapi.nmea.parser.RMCTest.testSetPosition",
          "net.sf.marineapi.nmea.parser.RMCTest.testSetTime",
          "net.sf.marineapi.nmea.parser.RMCTest.testSetDate",
          "net.sf.marineapi.nmea.parser.RMCTest.testGetDay",
          "net.sf.marineapi.nmea.parser.RMCTest.testGetFaaMode",
          "net.sf.marineapi.nmea.parser.RMCTest.testSetCourse",
          "net.sf.marineapi.nmea.parser.RMCTest.testSetDataStatus",
          "net.sf.marineapi.nmea.parser.RMCTest.testSetVariation",
          "net.sf.marineapi.nmea.parser.RMCTest.testGetYear",
          "net.sf.marineapi.nmea.parser.RMCTest.testGetMagneticVariation",
          "net.sf.marineapi.nmea.parser.RMCTest.testSetFaaModeWhenOmitted",
          "net.sf.marineapi.nmea.parser.RMCTest.testSetDirectionOfVariationWithInvalidDirection",
          "net.sf.marineapi.nmea.parser.RMCTest.testGetSpeed",
          "net.sf.marineapi.nmea.parser.RMCTest.testConstructor",
          "net.sf.marineapi.nmea.parser.RMCTest.testGetDataStatus",
          "net.sf.marineapi.nmea.parser.RMCTest.testGetDate",
          "net.sf.marineapi.nmea.parser.RMCTest.testSetDirectionOfVariation",
          "net.sf.marineapi.nmea.parser.VHWTest.testSetHeading",
          "net.sf.marineapi.nmea.parser.VHWTest.testSetMagneticHeading",
          "net.sf.marineapi.nmea.parser.VHWTest.testGetMagneticHeading",
          "net.sf.marineapi.nmea.parser.VHWTest.testConstructorString",
          "net.sf.marineapi.nmea.parser.VHWTest.testSetSpeedKilometres",
          "net.sf.marineapi.nmea.parser.VHWTest.testGetSpeedKnots",
          "net.sf.marineapi.nmea.parser.VHWTest.testGetHeading",
          "net.sf.marineapi.nmea.parser.VHWTest.testGetSpeedKilometres",
          "net.sf.marineapi.nmea.parser.VHWTest.testSetSpeedKnots",
          "net.sf.marineapi.nmea.parser.VHWTest.testIsTrue",
          "net.sf.marineapi.nmea.parser.VHWTest.testConstructorTalkerId",
          "net.sf.marineapi.nmea.parser.ZDATest.testGetYear",
          "net.sf.marineapi.nmea.parser.ZDATest.testSetLocalZoneHours",
          "net.sf.marineapi.nmea.parser.ZDATest.testGetDate",
          "net.sf.marineapi.nmea.parser.ZDATest.testGetLocalZoneHours",
          "net.sf.marineapi.nmea.parser.ZDATest.testToDate",
          "net.sf.marineapi.nmea.parser.ZDATest.testSetTime",
          "net.sf.marineapi.nmea.parser.ZDATest.testSetTimeAndLocalZone",
          "net.sf.marineapi.nmea.parser.ZDATest.testGetMonth",
          "net.sf.marineapi.nmea.parser.ZDATest.testGetDay",
          "net.sf.marineapi.nmea.parser.ZDATest.testGetLocalZoneMinutes",
          "net.sf.marineapi.nmea.parser.ZDATest.testGetTime",
          "net.sf.marineapi.nmea.parser.ZDATest.testConstructor",
          "net.sf.marineapi.nmea.parser.ZDATest.testSetLocalZoneMinutes",
          "net.sf.marineapi.nmea.parser.ZDATest.testSetDate",
          "net.sf.marineapi.nmea.sentence.SentenceIdTest.testParseUnknownId",
          "net.sf.marineapi.nmea.sentence.SentenceIdTest.testParseStrNormalLengthProprietaryId",
          "net.sf.marineapi.nmea.sentence.SentenceIdTest.testParseStrShortestPossibleProprietaryId",
          "net.sf.marineapi.nmea.sentence.SentenceIdTest.testParseStrShortProprietaryId",
          "net.sf.marineapi.nmea.sentence.SentenceIdTest.testParseKnownId",
          "net.sf.marineapi.nmea.sentence.SentenceIdTest.testParseStrStandardId",
          "net.sf.marineapi.nmea.sentence.SentenceIdTest.testParseStrLongestPossibleProprietaryId",
          "net.sf.marineapi.nmea.parser.HTDTest.testGetOverride",
          "net.sf.marineapi.nmea.parser.HTDTest.testGetCommandedRudderAngle",
          "net.sf.marineapi.nmea.parser.HTDTest.testGetCommandedRateOfTurnForHeadingChanges",
          "net.sf.marineapi.nmea.parser.HTDTest.testGetTurnMode",
          "net.sf.marineapi.nmea.parser.HTDTest.testGetOffHeadinStatus",
          "net.sf.marineapi.nmea.parser.HTDTest.testGetSteeringMode",
          "net.sf.marineapi.nmea.parser.HTDTest.testIsHeadingReferenceInUseTrue",
          "net.sf.marineapi.nmea.parser.HTDTest.testGetOffTrackStatus",
          "net.sf.marineapi.nmea.parser.HTDTest.testGetCommandedHeadingToSteer",
          "net.sf.marineapi.nmea.parser.HTDTest.testGetCommandedRadiusOfTurnForHEadingChanges",
          "net.sf.marineapi.nmea.parser.HTDTest.testGetRudderStatus",
          "net.sf.marineapi.nmea.parser.HTDTest.testGetCommandedOffTrackLimit",
          "net.sf.marineapi.nmea.parser.HTDTest.testGetHeading",
          "net.sf.marineapi.nmea.parser.HTDTest.testGetCommandedOffHeadingLimit",
          "net.sf.marineapi.nmea.parser.HTDTest.testIsTrue",
          "net.sf.marineapi.nmea.parser.HTDTest.testGetRudderDirection",
          "net.sf.marineapi.nmea.parser.HTDTest.testGetCommandedTrack",
          "net.sf.marineapi.nmea.parser.HTDTest.testGetCommandedRudderLimit",
          "net.sf.marineapi.nmea.parser.HTDTest.testConstructor",
          "net.sf.marineapi.nmea.sentence.TalkerIdTest.testParseUnknown",
          "net.sf.marineapi.nmea.sentence.TalkerIdTest.testParseProprietary",
          "net.sf.marineapi.nmea.sentence.TalkerIdTest.testParseAIS",
          "net.sf.marineapi.nmea.sentence.TalkerIdTest.testParse",
          "net.sf.marineapi.nmea.parser.MWVTest.testGetAngle",
          "net.sf.marineapi.nmea.parser.MWVTest.testIsTrue",
          "net.sf.marineapi.nmea.parser.MWVTest.testSetAngle",
          "net.sf.marineapi.nmea.parser.MWVTest.testGetSpeedUnit",
          "net.sf.marineapi.nmea.parser.MWVTest.testGetStatus",
          "net.sf.marineapi.nmea.parser.MWVTest.testSetNegativeSpeed",
          "net.sf.marineapi.nmea.parser.MWVTest.testSetStatus",
          "net.sf.marineapi.nmea.parser.MWVTest.testSetTrue",
          "net.sf.marineapi.nmea.parser.MWVTest.testMWVParserTalkerId",
          "net.sf.marineapi.nmea.parser.MWVTest.testSetAngleOutOfRange",
          "net.sf.marineapi.nmea.parser.MWVTest.testGetSpeed",
          "net.sf.marineapi.nmea.parser.MWVTest.testSetSpeed",
          "net.sf.marineapi.nmea.parser.MWVTest.testSetSpeedUnit",
          "net.sf.marineapi.nmea.parser.MWVTest.testSetInvalidSpeedUnit",
          "net.sf.marineapi.nmea.parser.MWVTest.testSetNegativeAngle",
          "net.sf.marineapi.nmea.parser.SentenceFactoryTest.testCreateCustomParser",
          "net.sf.marineapi.nmea.parser.SentenceFactoryTest.testListParsers",
          "net.sf.marineapi.nmea.parser.SentenceFactoryTest.testCreateParserWithRandom",
          "net.sf.marineapi.nmea.parser.SentenceFactoryTest.testUnregisterParser",
          "net.sf.marineapi.nmea.parser.SentenceFactoryTest.testCreateEmptyParserWithSentenceIdStr",
          "net.sf.marineapi.nmea.parser.SentenceFactoryTest.testCreateParserWithUnregistered",
          "net.sf.marineapi.nmea.parser.SentenceFactoryTest.testCreateParserWithNull",
          "net.sf.marineapi.nmea.parser.SentenceFactoryTest.testRegisterInvalidParser",
          "net.sf.marineapi.nmea.parser.SentenceFactoryTest.testHasParser",
          "net.sf.marineapi.nmea.parser.SentenceFactoryTest.testCreateParser",
          "net.sf.marineapi.nmea.parser.SentenceFactoryTest.testCreateEmptyParserWithSentenceId",
          "net.sf.marineapi.nmea.parser.SentenceFactoryTest.testCreateParserWithEmptyString",
          "net.sf.marineapi.nmea.parser.SentenceFactoryTest.testCreateEmptyCustomParser",
          "net.sf.marineapi.nmea.parser.SentenceFactoryTest.testSupportedTypesRegistered",
          "net.sf.marineapi.nmea.parser.SentenceFactoryTest.testGetInstance",
          "net.sf.marineapi.nmea.parser.SentenceFactoryTest.testRegisterParserWithAlternativeBeginChar",
          "net.sf.marineapi.nmea.parser.TTMTest.testSetTime",
          "net.sf.marineapi.nmea.parser.TTMTest.testGetSpeed",
          "net.sf.marineapi.nmea.parser.TTMTest.testConstructor",
          "net.sf.marineapi.nmea.parser.TTMTest.testSetCourse",
          "net.sf.marineapi.nmea.parser.TTMTest.testSetSpeed",
          "net.sf.marineapi.nmea.parser.TTMTest.testGetDistanceOfCPA",
          "net.sf.marineapi.nmea.parser.TTMTest.testGetDistance",
          "net.sf.marineapi.nmea.parser.TTMTest.testSetName",
          "net.sf.marineapi.nmea.parser.TTMTest.testGetCourse",
          "net.sf.marineapi.nmea.parser.TTMTest.testSetReferenceFalse",
          "net.sf.marineapi.nmea.parser.TTMTest.testSetTimeToCPA",
          "net.sf.marineapi.nmea.parser.TTMTest.testSetAcquisitionType",
          "net.sf.marineapi.nmea.parser.TTMTest.testGetNumber",
          "net.sf.marineapi.nmea.parser.TTMTest.testSetReferenceTrue",
          "net.sf.marineapi.nmea.parser.TTMTest.testSetDistance",
          "net.sf.marineapi.nmea.parser.TTMTest.testSetBearing",
          "net.sf.marineapi.nmea.parser.TTMTest.testSetNumber",
          "net.sf.marineapi.nmea.parser.TTMTest.testGetAcquisitionType",
          "net.sf.marineapi.nmea.parser.TTMTest.testSetStatus",
          "net.sf.marineapi.nmea.parser.TTMTest.testGetTime",
          "net.sf.marineapi.nmea.parser.TTMTest.testGetBearing",
          "net.sf.marineapi.nmea.parser.TTMTest.testSetDistanceOfCPA",
          "net.sf.marineapi.nmea.parser.TTMTest.testGetName",
          "net.sf.marineapi.nmea.parser.TTMTest.testGetStatus",
          "net.sf.marineapi.nmea.parser.TTMTest.testGetTimeToCPA",
          "net.sf.marineapi.nmea.parser.VBWTest.testSetGroundSpeedStatus",
          "net.sf.marineapi.nmea.parser.VBWTest.testGetTravWaterSpeed",
          "net.sf.marineapi.nmea.parser.VBWTest.testGetLongWaterSpeed",
          "net.sf.marineapi.nmea.parser.VBWTest.testSetTravGroundSpeed",
          "net.sf.marineapi.nmea.parser.VBWTest.testGetWaterSpeedStatus",
          "net.sf.marineapi.nmea.parser.VBWTest.testVBWParserTalkerId",
          "net.sf.marineapi.nmea.parser.VBWTest.testSetSternWaterSpeedStatus",
          "net.sf.marineapi.nmea.parser.VBWTest.testGetTravGroundSpeed",
          "net.sf.marineapi.nmea.parser.VBWTest.testSetLongGroundSpeed",
          "net.sf.marineapi.nmea.parser.VBWTest.testGetSternWaterSpeedStatus",
          "net.sf.marineapi.nmea.parser.VBWTest.testGetSternGroundSpeed",
          "net.sf.marineapi.nmea.parser.VBWTest.testVBWParserString",
          "net.sf.marineapi.nmea.parser.VBWTest.testGetSternWaterSpeed",
          "net.sf.marineapi.nmea.parser.VBWTest.testSetWaterSpeedStatus",
          "net.sf.marineapi.nmea.parser.VBWTest.testSetTravWaterSpeed",
          "net.sf.marineapi.nmea.parser.VBWTest.testSetLongWaterSpeed",
          "net.sf.marineapi.nmea.parser.VBWTest.testSetSternGroundSpeed",
          "net.sf.marineapi.nmea.parser.VBWTest.testSetSternWaterSpeed",
          "net.sf.marineapi.nmea.parser.VBWTest.testGetLongGroundSpeed",
          "net.sf.marineapi.nmea.parser.VBWTest.testSetSternGroundSpeedStatus",
          "net.sf.marineapi.nmea.parser.VBWTest.testGetGroundSpeedStatus",
          "net.sf.marineapi.nmea.parser.VBWTest.testGetSternGroundSpeedStatus",
          "net.sf.marineapi.nmea.parser.TXTTest.testSetMessageIndex",
          "net.sf.marineapi.nmea.parser.TXTTest.testStringConstructor",
          "net.sf.marineapi.nmea.parser.TXTTest.testSetMessage",
          "net.sf.marineapi.nmea.parser.TXTTest.testSetMessageIndexThrows",
          "net.sf.marineapi.nmea.parser.TXTTest.testSetMessageNonASCII",
          "net.sf.marineapi.nmea.parser.TXTTest.testTalkerIdConstructor",
          "net.sf.marineapi.nmea.parser.TXTTest.testGetMessageIndex",
          "net.sf.marineapi.nmea.parser.TXTTest.testGetIndentifier",
          "net.sf.marineapi.nmea.parser.TXTTest.testSetMessageCount",
          "net.sf.marineapi.nmea.parser.TXTTest.testSetIndentifier",
          "net.sf.marineapi.nmea.parser.TXTTest.testGetMessageCount",
          "net.sf.marineapi.nmea.parser.TXTTest.testSetMessageCountThrows",
          "net.sf.marineapi.nmea.parser.TXTTest.testGetMessage",
          "net.sf.marineapi.nmea.parser.MMBTest.testSetBars",
          "net.sf.marineapi.nmea.parser.MMBTest.testGetBars",
          "net.sf.marineapi.nmea.parser.MMBTest.testConstructors",
          "net.sf.marineapi.nmea.parser.MMBTest.testGetInchesOfMercury",
          "net.sf.marineapi.nmea.parser.MMBTest.testSetInchesOfMercury",
          "net.sf.marineapi.nmea.parser.MHUTest.testGetDewPoint",
          "net.sf.marineapi.nmea.parser.MHUTest.testGetAbsoluteHumidity",
          "net.sf.marineapi.nmea.parser.MHUTest.testSetDewPointUnit",
          "net.sf.marineapi.nmea.parser.MHUTest.testGetDewPointUnit",
          "net.sf.marineapi.nmea.parser.MHUTest.testSetDewPoint",
          "net.sf.marineapi.nmea.parser.MHUTest.testGetRelativeHumidity",
          "net.sf.marineapi.nmea.parser.MHUTest.testSetRelativeHumidity",
          "net.sf.marineapi.nmea.parser.MHUTest.testSetAbsoluteHumidity",
          "net.sf.marineapi.nmea.parser.MHUTest.testEmptySentenceConstructor",
          "net.sf.marineapi.nmea.parser.GGATest.testSetGeoidalHeight",
          "net.sf.marineapi.nmea.parser.GGATest.testSetNumberOfSatellites",
          "net.sf.marineapi.nmea.parser.GGATest.testConstructor",
          "net.sf.marineapi.nmea.parser.GGATest.testGetDgpsAge",
          "net.sf.marineapi.nmea.parser.GGATest.testGetAltitudeUnits",
          "net.sf.marineapi.nmea.parser.GGATest.testSetDgpsAge",
          "net.sf.marineapi.nmea.parser.GGATest.testGetPosition",
          "net.sf.marineapi.nmea.parser.GGATest.testSetNumberOfSatellitesThrows",
          "net.sf.marineapi.nmea.parser.GGATest.testSetAltitudeUnits",
          "net.sf.marineapi.nmea.parser.GGATest.testSetDgpsStationId",
          "net.sf.marineapi.nmea.parser.GGATest.testSetFixQuality",
          "net.sf.marineapi.nmea.parser.GGATest.testGetGeoidalHeightUnits",
          "net.sf.marineapi.nmea.parser.GGATest.testGetTime",
          "net.sf.marineapi.nmea.parser.GGATest.testGetNumberOfSatellites",
          "net.sf.marineapi.nmea.parser.GGATest.testSetHorizontalDOP",
          "net.sf.marineapi.nmea.parser.GGATest.testGetFixQuality",
          "net.sf.marineapi.nmea.parser.GGATest.testGetDgpsStationId",
          "net.sf.marineapi.nmea.parser.GGATest.testSetPosition",
          "net.sf.marineapi.nmea.parser.GGATest.testGetHorizontalDOP",
          "net.sf.marineapi.nmea.parser.GGATest.testGetGeoidalHeight",
          "net.sf.marineapi.nmea.parser.GGATest.testSetTime",
          "net.sf.marineapi.nmea.parser.GGATest.testSetGeoidalHeightUnits",
          "net.sf.marineapi.nmea.parser.GGATest.testGGAParser",
          "net.sf.marineapi.nmea.parser.GGATest.testGetAltitude",
          "net.sf.marineapi.nmea.parser.GGATest.testSetAltitude",
          "net.sf.marineapi.ais.util.Latitude27Test.conversionReturnsOnInvalidValues",
          "net.sf.marineapi.ais.util.Latitude27Test.largeNegativeValueIsNotCorrect",
          "net.sf.marineapi.ais.util.Latitude27Test.minValueIsAvailable",
          "net.sf.marineapi.ais.util.Latitude27Test.largeValueIsNotAvailable",
          "net.sf.marineapi.ais.util.Latitude27Test.defaultValueIsCorrect",
          "net.sf.marineapi.ais.util.Latitude27Test.maxValueIsCorrect",
          "net.sf.marineapi.ais.util.Latitude27Test.largeNegativeValueIsNotAvailable",
          "net.sf.marineapi.ais.util.Latitude27Test.minValueIsCorrect",
          "net.sf.marineapi.ais.util.Latitude27Test.largeValueIsNotCorrect",
          "net.sf.marineapi.ais.util.Latitude27Test.zeroIsCorrect",
          "net.sf.marineapi.ais.util.Latitude27Test.conversionToKnotsWorks",
          "net.sf.marineapi.ais.util.Latitude27Test.defaultValueIsNotAvailable",
          "net.sf.marineapi.ais.util.Latitude27Test.maxValueIsAvailable",
          "net.sf.marineapi.ais.util.Latitude27Test.zeroIsAvailable",
          "net.sf.marineapi.ais.event.AbstractAISMessageListenerTest.testParametrizedConstructor",
          "net.sf.marineapi.ais.event.AbstractAISMessageListenerTest.testOnMessageWithExpectedMessage",
          "net.sf.marineapi.ais.event.AbstractAISMessageListenerTest.testConstructor",
          "net.sf.marineapi.ais.event.AbstractAISMessageListenerTest.testBasicListenerWithUnexpectedMessage",
          "net.sf.marineapi.ais.event.AbstractAISMessageListenerTest.testSequenceListenerWithMixedOrder",
          "net.sf.marineapi.ais.event.AbstractAISMessageListenerTest.testGenericsListener",
          "net.sf.marineapi.ais.event.AbstractAISMessageListenerTest.testGenericsListenerDefaultConstructorThrows"
        ],
        "result": "ERROR",
        "testRunId": "1688743415821-2bbfa128-4a66-4cf7-adb5-43c47e8a8934"
      },
      "type": "OD"
    }
  ]
}
