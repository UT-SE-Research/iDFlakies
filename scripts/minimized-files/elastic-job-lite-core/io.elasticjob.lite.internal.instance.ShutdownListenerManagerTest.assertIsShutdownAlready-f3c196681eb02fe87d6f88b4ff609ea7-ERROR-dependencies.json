{
  "time": {
    "startTime": 1715979660261,
    "endTime": 1715980981225,
    "elapsedSeconds": 1320.9639999866486
  },
  "expectedRun": {
    "id": "1715979656091-611aaace-2981-4c2b-b398-473d44e40830",
    "testOrder": [
      "io.elasticjob.lite.exception.JobStatisticExceptionTest.assertGetCause",
      "io.elasticjob.lite.internal.schedule.SchedulerFacadeTest.assertUpdateJobConfiguration",
      "io.elasticjob.lite.internal.schedule.SchedulerFacadeTest.assertShutdownInstanceIfLeaderAndReconcileServiceIsRunning",
      "io.elasticjob.lite.internal.schedule.SchedulerFacadeTest.assertRegisterStartUpInfo",
      "io.elasticjob.lite.internal.schedule.SchedulerFacadeTest.assertShutdownInstanceIfNotLeaderAndReconcileServiceIsNotRunning",
      "io.elasticjob.lite.util.json.GsonFactoryTest.assertRegisterTypeAdapter",
      "io.elasticjob.lite.util.json.GsonFactoryTest.assertGetGson",
      "io.elasticjob.lite.internal.storage.JobNodeStorageTest.assertGetJobNodeData",
      "io.elasticjob.lite.internal.storage.JobNodeStorageTest.assertExecuteInTransactionSuccess",
      "io.elasticjob.lite.internal.storage.JobNodeStorageTest.assertReplaceJobNode",
      "io.elasticjob.lite.internal.storage.JobNodeStorageTest.assertGetJobNodeDataDirectly",
      "io.elasticjob.lite.internal.storage.JobNodeStorageTest.assertRemoveJobNodeIfNeeded",
      "io.elasticjob.lite.internal.storage.JobNodeStorageTest.assertExecuteInTransactionFailure",
      "io.elasticjob.lite.internal.storage.JobNodeStorageTest.assertAddDataListener",
      "io.elasticjob.lite.internal.storage.JobNodeStorageTest.assertIsJobNodeExisted",
      "io.elasticjob.lite.internal.storage.JobNodeStorageTest.assertCreateJobNodeIfNotNeeded",
      "io.elasticjob.lite.internal.storage.JobNodeStorageTest.assertUpdateJobNode",
      "io.elasticjob.lite.internal.storage.JobNodeStorageTest.assertRemoveJobNodeIfNotNeeded",
      "io.elasticjob.lite.internal.storage.JobNodeStorageTest.assertGetRegistryCenterTime",
      "io.elasticjob.lite.internal.storage.JobNodeStorageTest.assertGetJobNodeChildrenKeys",
      "io.elasticjob.lite.internal.storage.JobNodeStorageTest.assertCreateJobNodeIfNeeded",
      "io.elasticjob.lite.internal.storage.JobNodeStorageTest.assertCreateJobNodeIfRootJobNodeIsNotExist",
      "io.elasticjob.lite.internal.storage.JobNodeStorageTest.assertAddConnectionStateListener",
      "io.elasticjob.lite.internal.storage.JobNodeStorageTest.assertFillEphemeralJobNode",
      "io.elasticjob.lite.internal.storage.JobNodeStorageTest.assertFillJobNode",
      "io.elasticjob.lite.event.rdb.JobEventRdbStorageTest.assertAddJobStatusTraceEvent",
      "io.elasticjob.lite.event.rdb.JobEventRdbStorageTest.assertUpdateJobExecutionEventWhenFailure",
      "io.elasticjob.lite.event.rdb.JobEventRdbStorageTest.assertAddJobStatusTraceEventWhenFailoverWithTaskFailedState",
      "io.elasticjob.lite.event.rdb.JobEventRdbStorageTest.assertUpdateJobExecutionEventWhenFailureAndMessageExceed",
      "io.elasticjob.lite.event.rdb.JobEventRdbStorageTest.assertAddJobStatusTraceEventWhenFailoverWithTaskStagingState",
      "io.elasticjob.lite.event.rdb.JobEventRdbStorageTest.assertUpdateJobExecutionEventWhenFailureAndConflict",
      "io.elasticjob.lite.event.rdb.JobEventRdbStorageTest.assertUpdateJobExecutionEventWhenSuccessAndConflict",
      "io.elasticjob.lite.event.rdb.JobEventRdbStorageTest.assertFindJobExecutionEvent",
      "io.elasticjob.lite.event.rdb.JobEventRdbStorageTest.assertUpdateJobExecutionEventWhenSuccess",
      "io.elasticjob.lite.event.rdb.JobEventRdbStorageTest.assertAddJobExecutionEvent",
      "io.elasticjob.lite.api.JobSchedulerTest.assertInit",
      "io.elasticjob.lite.internal.reconcile.ReconcileServiceTest.assertReconcile",
      "io.elasticjob.lite.internal.schedule.JobScheduleControllerTest.assertShutdownJobIfShutdown",
      "io.elasticjob.lite.internal.schedule.JobScheduleControllerTest.assertRescheduleJobWhenTriggerIsNull",
      "io.elasticjob.lite.internal.schedule.JobScheduleControllerTest.assertIsPausedFailure",
      "io.elasticjob.lite.internal.schedule.JobScheduleControllerTest.assertTriggerJobIfShutdown",
      "io.elasticjob.lite.internal.schedule.JobScheduleControllerTest.assertPauseJobFailure",
      "io.elasticjob.lite.internal.schedule.JobScheduleControllerTest.assertTriggerJobFailure",
      "io.elasticjob.lite.internal.schedule.JobScheduleControllerTest.assertResumeJobSuccess",
      "io.elasticjob.lite.internal.schedule.JobScheduleControllerTest.assertIsPausedIfTriggerStateIsPaused",
      "io.elasticjob.lite.internal.schedule.JobScheduleControllerTest.assertShutdownSuccess",
      "io.elasticjob.lite.internal.schedule.JobScheduleControllerTest.assertRescheduleJobIfShutdown",
      "io.elasticjob.lite.internal.schedule.JobScheduleControllerTest.assertIsPausedIfTriggerStateIsNormal",
      "io.elasticjob.lite.internal.schedule.JobScheduleControllerTest.assertTriggerJobSuccess",
      "io.elasticjob.lite.internal.schedule.JobScheduleControllerTest.assertRescheduleJobSuccess",
      "io.elasticjob.lite.internal.schedule.JobScheduleControllerTest.assertRescheduleJobFailure",
      "io.elasticjob.lite.internal.schedule.JobScheduleControllerTest.assertPauseJobIfShutdown",
      "io.elasticjob.lite.internal.schedule.JobScheduleControllerTest.assertIsPauseJobIfShutdown",
      "io.elasticjob.lite.internal.schedule.JobScheduleControllerTest.assertResumeJobFailure",
      "io.elasticjob.lite.internal.schedule.JobScheduleControllerTest.assertResumeJobIfShutdown",
      "io.elasticjob.lite.internal.schedule.JobScheduleControllerTest.assertShutdownFailure",
      "io.elasticjob.lite.internal.schedule.JobScheduleControllerTest.assertPauseJobSuccess",
      "io.elasticjob.lite.api.strategy.JobShardingStrategyFactoryTest.assertGetStrategyFailureWhenNotStrategyClass",
      "io.elasticjob.lite.api.strategy.JobShardingStrategyFactoryTest.assertGetStrategyFailureWhenStrategyClassInvalid",
      "io.elasticjob.lite.api.strategy.JobShardingStrategyFactoryTest.assertGetStrategyFailureWhenClassNotFound",
      "io.elasticjob.lite.api.strategy.JobShardingStrategyFactoryTest.assertGetStrategySuccess",
      "io.elasticjob.lite.api.strategy.JobShardingStrategyFactoryTest.assertGetDefaultStrategy",
      "io.elasticjob.lite.internal.instance.ShutdownListenerManagerTest.assertIsShutdownAlready"
    ],
    "results": {
      "io.elasticjob.lite.internal.storage.JobNodeStorageTest.assertGetJobNodeData": {
        "name": "io.elasticjob.lite.internal.storage.JobNodeStorageTest.assertGetJobNodeData",
        "result": "PASS",
        "time": 0.000650099,
        "stackTrace": []
      },
      "io.elasticjob.lite.event.rdb.JobEventRdbStorageTest.assertUpdateJobExecutionEventWhenFailure": {
        "name": "io.elasticjob.lite.event.rdb.JobEventRdbStorageTest.assertUpdateJobExecutionEventWhenFailure",
        "result": "PASS",
        "time": 0.008060456,
        "stackTrace": []
      },
      "io.elasticjob.lite.internal.schedule.SchedulerFacadeTest.assertUpdateJobConfiguration": {
        "name": "io.elasticjob.lite.internal.schedule.SchedulerFacadeTest.assertUpdateJobConfiguration",
        "result": "PASS",
        "time": 1.135096553,
        "stackTrace": []
      },
      "io.elasticjob.lite.event.rdb.JobEventRdbStorageTest.assertUpdateJobExecutionEventWhenSuccess": {
        "name": "io.elasticjob.lite.event.rdb.JobEventRdbStorageTest.assertUpdateJobExecutionEventWhenSuccess",
        "result": "PASS",
        "time": 0.00325296,
        "stackTrace": []
      },
      "io.elasticjob.lite.event.rdb.JobEventRdbStorageTest.assertUpdateJobExecutionEventWhenFailureAndConflict": {
        "name": "io.elasticjob.lite.event.rdb.JobEventRdbStorageTest.assertUpdateJobExecutionEventWhenFailureAndConflict",
        "result": "PASS",
        "time": 0.004939253,
        "stackTrace": []
      },
      "io.elasticjob.lite.event.rdb.JobEventRdbStorageTest.assertUpdateJobExecutionEventWhenSuccessAndConflict": {
        "name": "io.elasticjob.lite.event.rdb.JobEventRdbStorageTest.assertUpdateJobExecutionEventWhenSuccessAndConflict",
        "result": "PASS",
        "time": 0.003644198,
        "stackTrace": []
      },
      "io.elasticjob.lite.internal.storage.JobNodeStorageTest.assertCreateJobNodeIfNeeded": {
        "name": "io.elasticjob.lite.internal.storage.JobNodeStorageTest.assertCreateJobNodeIfNeeded",
        "result": "PASS",
        "time": 0.000365539,
        "stackTrace": []
      },
      "io.elasticjob.lite.internal.instance.ShutdownListenerManagerTest.assertIsShutdownAlready": {
        "name": "io.elasticjob.lite.internal.instance.ShutdownListenerManagerTest.assertIsShutdownAlready",
        "result": "ERROR",
        "time": 0.039338559,
        "stackTrace": [
          "io.elasticjob.lite.internal.schedule.SchedulerFacade.shutdownInstance(SchedulerFacade.java:128)",
          "io.elasticjob.lite.internal.instance.ShutdownListenerManagerTest.assertIsShutdownAlready(ShutdownListenerManagerTest.java:60)",
          "sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)",
          "sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)",
          "sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)",
          "java.lang.reflect.Method.invoke(Method.java:498)",
          "org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)",
          "org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)",
          "org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)",
          "org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)",
          "org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)",
          "org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)",
          "org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)",
          "org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)",
          "org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)",
          "org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)",
          "org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)",
          "org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)",
          "org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)",
          "org.junit.runners.ParentRunner.run(ParentRunner.java:363)",
          "org.junit.runners.Suite.runChild(Suite.java:128)",
          "org.junit.runners.Suite.runChild(Suite.java:27)",
          "org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)",
          "org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)",
          "org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)",
          "org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)",
          "org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)",
          "org.junit.runners.ParentRunner.run(ParentRunner.java:363)",
          "org.junit.runner.JUnitCore.run(JUnitCore.java:137)",
          "org.junit.runner.JUnitCore.run(JUnitCore.java:115)",
          "edu.illinois.cs.testrunner.execution.JUnitTestExecutor.executeHelper(JUnitTestExecutor.java:262)",
          "edu.illinois.cs.testrunner.execution.JUnitTestExecutor.execute(JUnitTestExecutor.java:315)",
          "edu.illinois.cs.testrunner.execution.JUnitTestExecutor.executeWithJUnit4Runner(JUnitTestExecutor.java:343)",
          "edu.illinois.cs.testrunner.execution.JUnitTestExecutor.runOrder(JUnitTestExecutor.java:53)",
          "edu.illinois.cs.testrunner.execution.Executor$.$anonfun$run$1(Executor.scala:30)",
          "scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:12)",
          "scala.util.Try$.apply(Try.scala:209)",
          "edu.illinois.cs.testrunner.execution.Executor$.run(Executor.scala:28)",
          "edu.illinois.cs.testrunner.execution.Executor$.main(Executor.scala:18)",
          "edu.illinois.cs.testrunner.execution.Executor.main(Executor.scala)"
        ]
      },
      "io.elasticjob.lite.api.strategy.JobShardingStrategyFactoryTest.assertGetStrategyFailureWhenNotStrategyClass": {
        "name": "io.elasticjob.lite.api.strategy.JobShardingStrategyFactoryTest.assertGetStrategyFailureWhenNotStrategyClass",
        "result": "PASS",
        "time": 0.000526966,
        "stackTrace": []
      },
      "io.elasticjob.lite.internal.storage.JobNodeStorageTest.assertFillJobNode": {
        "name": "io.elasticjob.lite.internal.storage.JobNodeStorageTest.assertFillJobNode",
        "result": "PASS",
        "time": 0.000146398,
        "stackTrace": []
      },
      "io.elasticjob.lite.event.rdb.JobEventRdbStorageTest.assertAddJobStatusTraceEventWhenFailoverWithTaskStagingState": {
        "name": "io.elasticjob.lite.event.rdb.JobEventRdbStorageTest.assertAddJobStatusTraceEventWhenFailoverWithTaskStagingState",
        "result": "PASS",
        "time": 0.003567264,
        "stackTrace": []
      },
      "io.elasticjob.lite.internal.schedule.JobScheduleControllerTest.assertResumeJobIfShutdown": {
        "name": "io.elasticjob.lite.internal.schedule.JobScheduleControllerTest.assertResumeJobIfShutdown",
        "result": "PASS",
        "time": 0.000142545,
        "stackTrace": []
      },
      "io.elasticjob.lite.internal.storage.JobNodeStorageTest.assertIsJobNodeExisted": {
        "name": "io.elasticjob.lite.internal.storage.JobNodeStorageTest.assertIsJobNodeExisted",
        "result": "PASS",
        "time": 0.000376537,
        "stackTrace": []
      },
      "io.elasticjob.lite.internal.storage.JobNodeStorageTest.assertCreateJobNodeIfRootJobNodeIsNotExist": {
        "name": "io.elasticjob.lite.internal.storage.JobNodeStorageTest.assertCreateJobNodeIfRootJobNodeIsNotExist",
        "result": "PASS",
        "time": 0.000263019,
        "stackTrace": []
      },
      "io.elasticjob.lite.event.rdb.JobEventRdbStorageTest.assertAddJobStatusTraceEventWhenFailoverWithTaskFailedState": {
        "name": "io.elasticjob.lite.event.rdb.JobEventRdbStorageTest.assertAddJobStatusTraceEventWhenFailoverWithTaskFailedState",
        "result": "PASS",
        "time": 0.005851093,
        "stackTrace": []
      },
      "io.elasticjob.lite.internal.schedule.JobScheduleControllerTest.assertResumeJobSuccess": {
        "name": "io.elasticjob.lite.internal.schedule.JobScheduleControllerTest.assertResumeJobSuccess",
        "result": "PASS",
        "time": 0.000310435,
        "stackTrace": []
      },
      "io.elasticjob.lite.internal.schedule.JobScheduleControllerTest.assertResumeJobFailure": {
        "name": "io.elasticjob.lite.internal.schedule.JobScheduleControllerTest.assertResumeJobFailure",
        "result": "PASS",
        "time": 0.000249151,
        "stackTrace": []
      },
      "io.elasticjob.lite.internal.storage.JobNodeStorageTest.assertGetJobNodeChildrenKeys": {
        "name": "io.elasticjob.lite.internal.storage.JobNodeStorageTest.assertGetJobNodeChildrenKeys",
        "result": "PASS",
        "time": 0.000405983,
        "stackTrace": []
      },
      "io.elasticjob.lite.internal.storage.JobNodeStorageTest.assertReplaceJobNode": {
        "name": "io.elasticjob.lite.internal.storage.JobNodeStorageTest.assertReplaceJobNode",
        "result": "PASS",
        "time": 0.000299911,
        "stackTrace": []
      },
      "io.elasticjob.lite.internal.storage.JobNodeStorageTest.assertGetJobNodeDataDirectly": {
        "name": "io.elasticjob.lite.internal.storage.JobNodeStorageTest.assertGetJobNodeDataDirectly",
        "result": "PASS",
        "time": 0.000229376,
        "stackTrace": []
      },
      "io.elasticjob.lite.internal.schedule.JobScheduleControllerTest.assertShutdownJobIfShutdown": {
        "name": "io.elasticjob.lite.internal.schedule.JobScheduleControllerTest.assertShutdownJobIfShutdown",
        "result": "PASS",
        "time": 0.116244646,
        "stackTrace": []
      },
      "io.elasticjob.lite.api.strategy.JobShardingStrategyFactoryTest.assertGetDefaultStrategy": {
        "name": "io.elasticjob.lite.api.strategy.JobShardingStrategyFactoryTest.assertGetDefaultStrategy",
        "result": "PASS",
        "time": 1.6101e-05,
        "stackTrace": []
      },
      "io.elasticjob.lite.internal.schedule.JobScheduleControllerTest.assertRescheduleJobFailure": {
        "name": "io.elasticjob.lite.internal.schedule.JobScheduleControllerTest.assertRescheduleJobFailure",
        "result": "PASS",
        "time": 0.000483006,
        "stackTrace": []
      },
      "io.elasticjob.lite.internal.storage.JobNodeStorageTest.assertExecuteInTransactionFailure": {
        "name": "io.elasticjob.lite.internal.storage.JobNodeStorageTest.assertExecuteInTransactionFailure",
        "result": "PASS",
        "time": 0.002533014,
        "stackTrace": []
      },
      "io.elasticjob.lite.internal.storage.JobNodeStorageTest.assertRemoveJobNodeIfNeeded": {
        "name": "io.elasticjob.lite.internal.storage.JobNodeStorageTest.assertRemoveJobNodeIfNeeded",
        "result": "PASS",
        "time": 0.000290954,
        "stackTrace": []
      },
      "io.elasticjob.lite.internal.storage.JobNodeStorageTest.assertGetRegistryCenterTime": {
        "name": "io.elasticjob.lite.internal.storage.JobNodeStorageTest.assertGetRegistryCenterTime",
        "result": "PASS",
        "time": 0.000449742,
        "stackTrace": []
      },
      "io.elasticjob.lite.internal.schedule.JobScheduleControllerTest.assertRescheduleJobSuccess": {
        "name": "io.elasticjob.lite.internal.schedule.JobScheduleControllerTest.assertRescheduleJobSuccess",
        "result": "PASS",
        "time": 0.000678428,
        "stackTrace": []
      },
      "io.elasticjob.lite.internal.schedule.JobScheduleControllerTest.assertRescheduleJobWhenTriggerIsNull": {
        "name": "io.elasticjob.lite.internal.schedule.JobScheduleControllerTest.assertRescheduleJobWhenTriggerIsNull",
        "result": "PASS",
        "time": 0.001165158,
        "stackTrace": []
      },
      "io.elasticjob.lite.internal.storage.JobNodeStorageTest.assertUpdateJobNode": {
        "name": "io.elasticjob.lite.internal.storage.JobNodeStorageTest.assertUpdateJobNode",
        "result": "PASS",
        "time": 0.000172602,
        "stackTrace": []
      },
      "io.elasticjob.lite.internal.schedule.JobScheduleControllerTest.assertRescheduleJobIfShutdown": {
        "name": "io.elasticjob.lite.internal.schedule.JobScheduleControllerTest.assertRescheduleJobIfShutdown",
        "result": "PASS",
        "time": 0.00019834,
        "stackTrace": []
      },
      "io.elasticjob.lite.event.rdb.JobEventRdbStorageTest.assertFindJobExecutionEvent": {
        "name": "io.elasticjob.lite.event.rdb.JobEventRdbStorageTest.assertFindJobExecutionEvent",
        "result": "PASS",
        "time": 0.002759439,
        "stackTrace": []
      },
      "io.elasticjob.lite.internal.storage.JobNodeStorageTest.assertAddConnectionStateListener": {
        "name": "io.elasticjob.lite.internal.storage.JobNodeStorageTest.assertAddConnectionStateListener",
        "result": "PASS",
        "time": 0.024447266,
        "stackTrace": []
      },
      "io.elasticjob.lite.api.JobSchedulerTest.assertInit": {
        "name": "io.elasticjob.lite.api.JobSchedulerTest.assertInit",
        "result": "PASS",
        "time": 0.097128146,
        "stackTrace": []
      },
      "io.elasticjob.lite.internal.schedule.JobScheduleControllerTest.assertTriggerJobIfShutdown": {
        "name": "io.elasticjob.lite.internal.schedule.JobScheduleControllerTest.assertTriggerJobIfShutdown",
        "result": "PASS",
        "time": 0.000244938,
        "stackTrace": []
      },
      "io.elasticjob.lite.internal.schedule.JobScheduleControllerTest.assertPauseJobIfShutdown": {
        "name": "io.elasticjob.lite.internal.schedule.JobScheduleControllerTest.assertPauseJobIfShutdown",
        "result": "PASS",
        "time": 0.00015536,
        "stackTrace": []
      },
      "io.elasticjob.lite.internal.schedule.SchedulerFacadeTest.assertShutdownInstanceIfNotLeaderAndReconcileServiceIsNotRunning": {
        "name": "io.elasticjob.lite.internal.schedule.SchedulerFacadeTest.assertShutdownInstanceIfNotLeaderAndReconcileServiceIsNotRunning",
        "result": "PASS",
        "time": 0.00127148,
        "stackTrace": []
      },
      "io.elasticjob.lite.internal.schedule.JobScheduleControllerTest.assertTriggerJobFailure": {
        "name": "io.elasticjob.lite.internal.schedule.JobScheduleControllerTest.assertTriggerJobFailure",
        "result": "PASS",
        "time": 0.000289539,
        "stackTrace": []
      },
      "io.elasticjob.lite.internal.storage.JobNodeStorageTest.assertFillEphemeralJobNode": {
        "name": "io.elasticjob.lite.internal.storage.JobNodeStorageTest.assertFillEphemeralJobNode",
        "result": "PASS",
        "time": 0.000310659,
        "stackTrace": []
      },
      "io.elasticjob.lite.internal.storage.JobNodeStorageTest.assertCreateJobNodeIfNotNeeded": {
        "name": "io.elasticjob.lite.internal.storage.JobNodeStorageTest.assertCreateJobNodeIfNotNeeded",
        "result": "PASS",
        "time": 0.000439139,
        "stackTrace": []
      },
      "io.elasticjob.lite.exception.JobStatisticExceptionTest.assertGetCause": {
        "name": "io.elasticjob.lite.exception.JobStatisticExceptionTest.assertGetCause",
        "result": "PASS",
        "time": 0.001993076,
        "stackTrace": []
      },
      "io.elasticjob.lite.event.rdb.JobEventRdbStorageTest.assertUpdateJobExecutionEventWhenFailureAndMessageExceed": {
        "name": "io.elasticjob.lite.event.rdb.JobEventRdbStorageTest.assertUpdateJobExecutionEventWhenFailureAndMessageExceed",
        "result": "PASS",
        "time": 0.00414283,
        "stackTrace": []
      },
      "io.elasticjob.lite.internal.storage.JobNodeStorageTest.assertExecuteInTransactionSuccess": {
        "name": "io.elasticjob.lite.internal.storage.JobNodeStorageTest.assertExecuteInTransactionSuccess",
        "result": "PASS",
        "time": 0.272763343,
        "stackTrace": []
      },
      "io.elasticjob.lite.internal.schedule.JobScheduleControllerTest.assertShutdownSuccess": {
        "name": "io.elasticjob.lite.internal.schedule.JobScheduleControllerTest.assertShutdownSuccess",
        "result": "PASS",
        "time": 0.00028161,
        "stackTrace": []
      },
      "io.elasticjob.lite.internal.schedule.JobScheduleControllerTest.assertIsPauseJobIfShutdown": {
        "name": "io.elasticjob.lite.internal.schedule.JobScheduleControllerTest.assertIsPauseJobIfShutdown",
        "result": "PASS",
        "time": 0.000272752,
        "stackTrace": []
      },
      "io.elasticjob.lite.internal.schedule.JobScheduleControllerTest.assertShutdownFailure": {
        "name": "io.elasticjob.lite.internal.schedule.JobScheduleControllerTest.assertShutdownFailure",
        "result": "PASS",
        "time": 0.000178592,
        "stackTrace": []
      },
      "io.elasticjob.lite.api.strategy.JobShardingStrategyFactoryTest.assertGetStrategyFailureWhenClassNotFound": {
        "name": "io.elasticjob.lite.api.strategy.JobShardingStrategyFactoryTest.assertGetStrategyFailureWhenClassNotFound",
        "result": "PASS",
        "time": 0.000172364,
        "stackTrace": []
      },
      "io.elasticjob.lite.api.strategy.JobShardingStrategyFactoryTest.assertGetStrategyFailureWhenStrategyClassInvalid": {
        "name": "io.elasticjob.lite.api.strategy.JobShardingStrategyFactoryTest.assertGetStrategyFailureWhenStrategyClassInvalid",
        "result": "PASS",
        "time": 0.000284198,
        "stackTrace": []
      },
      "io.elasticjob.lite.util.json.GsonFactoryTest.assertRegisterTypeAdapter": {
        "name": "io.elasticjob.lite.util.json.GsonFactoryTest.assertRegisterTypeAdapter",
        "result": "PASS",
        "time": 0.017654945,
        "stackTrace": []
      },
      "io.elasticjob.lite.internal.schedule.JobScheduleControllerTest.assertIsPausedIfTriggerStateIsNormal": {
        "name": "io.elasticjob.lite.internal.schedule.JobScheduleControllerTest.assertIsPausedIfTriggerStateIsNormal",
        "result": "PASS",
        "time": 0.000187976,
        "stackTrace": []
      },
      "io.elasticjob.lite.internal.schedule.JobScheduleControllerTest.assertPauseJobSuccess": {
        "name": "io.elasticjob.lite.internal.schedule.JobScheduleControllerTest.assertPauseJobSuccess",
        "result": "PASS",
        "time": 0.000149146,
        "stackTrace": []
      },
      "io.elasticjob.lite.internal.schedule.JobScheduleControllerTest.assertIsPausedFailure": {
        "name": "io.elasticjob.lite.internal.schedule.JobScheduleControllerTest.assertIsPausedFailure",
        "result": "PASS",
        "time": 0.001622203,
        "stackTrace": []
      },
      "io.elasticjob.lite.internal.schedule.JobScheduleControllerTest.assertPauseJobFailure": {
        "name": "io.elasticjob.lite.internal.schedule.JobScheduleControllerTest.assertPauseJobFailure",
        "result": "PASS",
        "time": 0.000211115,
        "stackTrace": []
      },
      "io.elasticjob.lite.internal.storage.JobNodeStorageTest.assertRemoveJobNodeIfNotNeeded": {
        "name": "io.elasticjob.lite.internal.storage.JobNodeStorageTest.assertRemoveJobNodeIfNotNeeded",
        "result": "PASS",
        "time": 0.00020748,
        "stackTrace": []
      },
      "io.elasticjob.lite.internal.reconcile.ReconcileServiceTest.assertReconcile": {
        "name": "io.elasticjob.lite.internal.reconcile.ReconcileServiceTest.assertReconcile",
        "result": "PASS",
        "time": 0.001911007,
        "stackTrace": []
      },
      "io.elasticjob.lite.internal.schedule.SchedulerFacadeTest.assertShutdownInstanceIfLeaderAndReconcileServiceIsRunning": {
        "name": "io.elasticjob.lite.internal.schedule.SchedulerFacadeTest.assertShutdownInstanceIfLeaderAndReconcileServiceIsRunning",
        "result": "PASS",
        "time": 0.002336643,
        "stackTrace": []
      },
      "io.elasticjob.lite.event.rdb.JobEventRdbStorageTest.assertAddJobExecutionEvent": {
        "name": "io.elasticjob.lite.event.rdb.JobEventRdbStorageTest.assertAddJobExecutionEvent",
        "result": "PASS",
        "time": 0.001965996,
        "stackTrace": []
      },
      "io.elasticjob.lite.internal.storage.JobNodeStorageTest.assertAddDataListener": {
        "name": "io.elasticjob.lite.internal.storage.JobNodeStorageTest.assertAddDataListener",
        "result": "PASS",
        "time": 0.075131584,
        "stackTrace": []
      },
      "io.elasticjob.lite.internal.schedule.SchedulerFacadeTest.assertRegisterStartUpInfo": {
        "name": "io.elasticjob.lite.internal.schedule.SchedulerFacadeTest.assertRegisterStartUpInfo",
        "result": "PASS",
        "time": 0.001638757,
        "stackTrace": []
      },
      "io.elasticjob.lite.api.strategy.JobShardingStrategyFactoryTest.assertGetStrategySuccess": {
        "name": "io.elasticjob.lite.api.strategy.JobShardingStrategyFactoryTest.assertGetStrategySuccess",
        "result": "PASS",
        "time": 0.000234332,
        "stackTrace": []
      },
      "io.elasticjob.lite.util.json.GsonFactoryTest.assertGetGson": {
        "name": "io.elasticjob.lite.util.json.GsonFactoryTest.assertGetGson",
        "result": "PASS",
        "time": 3.2972e-05,
        "stackTrace": []
      },
      "io.elasticjob.lite.event.rdb.JobEventRdbStorageTest.assertAddJobStatusTraceEvent": {
        "name": "io.elasticjob.lite.event.rdb.JobEventRdbStorageTest.assertAddJobStatusTraceEvent",
        "result": "PASS",
        "time": 0.162120428,
        "stackTrace": []
      },
      "io.elasticjob.lite.internal.schedule.JobScheduleControllerTest.assertTriggerJobSuccess": {
        "name": "io.elasticjob.lite.internal.schedule.JobScheduleControllerTest.assertTriggerJobSuccess",
        "result": "PASS",
        "time": 0.000216305,
        "stackTrace": []
      },
      "io.elasticjob.lite.internal.schedule.JobScheduleControllerTest.assertIsPausedIfTriggerStateIsPaused": {
        "name": "io.elasticjob.lite.internal.schedule.JobScheduleControllerTest.assertIsPausedIfTriggerStateIsPaused",
        "result": "PASS",
        "time": 0.000195002,
        "stackTrace": []
      }
    }
  },
  "expected": "ERROR",
  "dependentTest": "io.elasticjob.lite.internal.instance.ShutdownListenerManagerTest.assertIsShutdownAlready",
  "polluters": [
    {
      "time": {
        "startTime": 1715979663033,
        "endTime": 1715979680888,
        "elapsedSeconds": 17.855000019073486
      },
      "index": 0,
      "deps": [
        "io.elasticjob.lite.api.JobSchedulerTest.assertInit"
      ],
      "cleanerData": {
        "dependentTest": "io.elasticjob.lite.internal.instance.ShutdownListenerManagerTest.assertIsShutdownAlready",
        "time": {
          "addTime": {
            "startTime": 1715979680891,
            "endTime": 1715979690006,
            "elapsedSeconds": 9.115999698638916
          },
          "totalTime": {
            "startTime": 1715979680891,
            "endTime": 1715980702389,
            "elapsedSeconds": 1021.4979999065399
          }
        },
        "expected": "ERROR",
        "isolationResult": "PASS",
        "cleaners": [
          {
            "dependentTest": "io.elasticjob.lite.internal.instance.ShutdownListenerManagerTest.assertIsShutdownAlready",
            "originalSize": 247,
            "cleanerTests": [
              "io.elasticjob.lite.internal.failover.FailoverServiceTest.assertGetLocalFailoverItems"
            ],
            "orderFound": 0,
            "time": {
              "addTime": {
                "startTime": 1715979680891,
                "endTime": 1715979690006,
                "elapsedSeconds": 9.115999698638916
              },
              "totalTime": {
                "startTime": 1715979680891,
                "endTime": 1715980702389,
                "elapsedSeconds": 1021.4979999065399
              }
            }
          },
          {
            "dependentTest": "io.elasticjob.lite.internal.instance.ShutdownListenerManagerTest.assertIsShutdownAlready",
            "originalSize": 472,
            "cleanerTests": [
              "io.elasticjob.lite.internal.sharding.ShardingServiceTest.assertGetShardingItemsWithEnabledServer"
            ],
            "orderFound": 1,
            "time": {
              "addTime": {
                "startTime": 1715979680891,
                "endTime": 1715979710762,
                "elapsedSeconds": 29.871999740600586
              },
              "totalTime": {
                "startTime": 1715979680891,
                "endTime": 1715980799633,
                "elapsedSeconds": 1118.7419998645782
              }
            }
          },
          {
            "dependentTest": "io.elasticjob.lite.internal.instance.ShutdownListenerManagerTest.assertIsShutdownAlready",
            "originalSize": 1,
            "cleanerTests": [
              "io.elasticjob.lite.internal.config.RescheduleListenerManagerTest.assertCronSettingChangedJobListenerWhenIsCronPathAndUpdateAndFindJob"
            ],
            "orderFound": 2,
            "time": {
              "addTime": {
                "startTime": 1715979680891,
                "endTime": 1715980014686,
                "elapsedSeconds": 333.7959990501404
              },
              "totalTime": {
                "startTime": 1715979680891,
                "endTime": 1715980805179,
                "elapsedSeconds": 1124.287999868393
              }
            }
          },
          {
            "dependentTest": "io.elasticjob.lite.internal.instance.ShutdownListenerManagerTest.assertIsShutdownAlready",
            "originalSize": 1,
            "cleanerTests": [
              "io.elasticjob.lite.internal.election.ElectionListenerManagerTest.assertLeaderElectionWhenRemoveLeaderInstancePathWithAvailableServer"
            ],
            "orderFound": 3,
            "time": {
              "addTime": {
                "startTime": 1715979680891,
                "endTime": 1715980029387,
                "elapsedSeconds": 348.49699902534485
              },
              "totalTime": {
                "startTime": 1715979680891,
                "endTime": 1715980810751,
                "elapsedSeconds": 1129.8599998950958
              }
            }
          }
        ]
      }
    }
  ],
  "hash": "f3c196681eb02fe87d6f88b4ff609ea7",
  "flakyClass": "OD"
}
