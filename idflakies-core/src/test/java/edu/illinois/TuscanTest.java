package edu.illinois;

import java.util.*;
import java.util.stream.IntStream;

import org.junit.Assert;
import org.junit.experimental.theories.DataPoints;
import org.junit.experimental.theories.Theories;
import org.junit.experimental.theories.Theory;
import org.junit.runner.RunWith;

import edu.illinois.cs.dt.tools.utility.Tuscan;

@RunWith(Theories.class)
public class TuscanTest {

    @DataPoints
    public static int[] integers() {
        int[] range = IntStream.rangeClosed(1, 20).toArray();
        return range;
    }

    @Theory
    public void test(int n) throws Exception {
        Set<List<Integer>> allPairs = generateAllPairs(n);
        Set<List<Integer>> tuscanCoveredPairs = tuscanPairs(n);

        Assert.assertEquals(allPairs, tuscanCoveredPairs);
    }
    
    private static Set<List<Integer>> generateAllPairs(int n) {
        // Generates all pairs with a naive algorithm to compare with Tuscan Squares
        Set<List<Integer>> allPairs = new LinkedHashSet<List<Integer>>();
        int[] numbersArray = IntStream.range(0, n).toArray();
        for (int i = 0; i < numbersArray.length; i++) {
            for (int j = 0; j < numbersArray.length; j++) {
                if (numbersArray[i] != numbersArray[j]) {
                    List<Integer> newPair = new ArrayList<>();
                    newPair.add(numbersArray[i]);
                    newPair.add(numbersArray[j]);
                    allPairs.add(newPair);
                }
            }
        }
        return allPairs;
    }

    private static Set<List<Integer>> tuscanPairs(int n) {
        // Finding all number pairs generated by Tuscan Squares 
        Set<List<Integer>> visitedPairs = new LinkedHashSet<List<Integer>>();
        int[][] matrix = Tuscan.generateTuscanPermutations(n);
        int rows = matrix.length;
        for (int i = 0; i < rows; i++) {
            int[] currentRow = matrix[i];
            for (int j = 0; j < currentRow.length - 2; j++) {
                // All rows will have an extra 0 at the end hence we have -2
                List<Integer> newPair = new ArrayList<Integer>();
                newPair.add(currentRow[j]);
                newPair.add(currentRow[j + 1]);
                visitedPairs.add(newPair);
            }
        }
        return visitedPairs;
    }
}
